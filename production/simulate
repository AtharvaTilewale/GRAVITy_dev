#!/bin/bash
#Author: Atharva Tilewale
#Protein simulation made easy with GRAVITy

# Change working directory
project_dir=$(head -n 1 "/etc/GRAVITy/current_dir.txt")
cd $project_dir
# Source the color script
source /etc/GRAVITy/colors
echo start > $project_dir/run_parameters.conf
source $project_dir/run_parameters.conf
param_file=$project_dir/run_parameters.conf

auto_check() {
    param_auto_file=$(head -n 1 "$param_file")
    if [[ "$param_auto_file" == "run_type=auto" ]]; then
        echo true
    else
        echo false
    fi
}

# #Source mdp files
# ions_mdp = '$project_dir/ions.mdp'
# md_mdp = '$project_dir/md.mdp'
# mdout_mdp = '$project_dir/mdout.mdp'
# minim_mdp = '$project_dir/minim.mdp'
# npt_mdp = '$project_dir/npt.mdp'
# nvt_mdp = '$project_dir/nvt.mdp'

# Function to stop the spinner if an error occurs
stop_spinner() {
    if [ ! -z "$spinner_pid" ]; then
        kill $spinner_pid
    fi
}

# Function to display a rotating loader with custom text
show_spinner() {
    local pid=$1      # Process ID to monitor
    local message=$2  # Custom loading message
    local spin='-\|/' # Spinner characters
    local i=0

    # Loop to display the spinner until the task completes
    while kill -0 $pid 2>/dev/null; do
        i=$(((i + 1) % 4))
        printf "\r${spin:$i:1} %s..." "$message"
        sleep 0.1
    done
    printf "\r%s...        \n" "$message"
}

#Loaders
#Download loader
download_loader() {
    show_spinner $! "Downloading $file_download_name"
    wait $!
    if [ $? -ne 0 ]; then
        echo -e "${LIGHT_RED}Error: Download failed. Please check your internet connection and try again.${NC}"
        exit 1
    else
        echo -e ${LIGHT_GREEN}$file_download_name "downloaded successfully!"${NC}
        sleep 1.0
    fi
}

#Box loader
pdbfix_loader() {
    show_spinner $! "Fixing PDB File"
    wait $!
    if [ $? -ne 0 ]; then
        echo -e "${LIGHT_RED}Error: Failed to fix PDB file. See log file for more info.${NC}"
        exit 1
    else
        echo -e ${LIGHT_GREEN}"PDB file fixed successfully. Restarting generating protein topology."${NC}
        sleep 3.0
    fi
}

#Box loader
box_loader() {
    show_spinner $! "Preparing Box"
    wait $!
    if [ $? -ne 0 ]; then
        echo -e "${LIGHT_RED}Error: Failed to define the box. See log file for more info.${NC}"
        exit 1
    else
        echo -e ${LIGHT_GREEN}"Box prepared successfully!"${NC}
        sleep 1.0
    fi
}

#Solvate model loader
solvate_loader() {
    show_spinner $! "Solvating the system"
    wait $!
    if [ $? -ne 0 ]; then
        echo -e "${LIGHT_RED}Error: Failed to solvate the system. See log file for more info.${NC}"
        exit 1
    else
        echo -e ${LIGHT_GREEN}"System solvated successfully!"${NC}
        sleep 1.0
    fi
}

#ion tpr loader
ion_tpr_loader() {
    show_spinner $! "Adding ions to the system"
    wait $!
    if [ $? -ne 0 ]; then
        echo -e "${LIGHT_RED}Error: Failed to generate ions.tpr. See log file for more info.${NC}"
        exit 1
    else
        echo -e ${LIGHT_GREEN}"Ions.tpr generated successfully"${NC}
        sleep 1.0
    fi
}

#Ion addition loader
ion_add_loader() {
    show_spinner $! "Adding ions to the system"
    wait $!
    if [ $? -ne 0 ]; then
        echo -e "${LIGHT_RED}Error: Failed to add ions. See log file for more info.${NC}"
        exit 1
    else
        echo -e ${LIGHT_GREEN}"Ions added successfully"${NC}
        sleep 1.0
    fi
}

# #Energy minimization preparation
# preparing_energy_min_loader(){
#     show_spinner $! "Preparing"
#     wait $!
#     if [ $? -ne 0 ]; then
#         echo -e "${LIGHT_RED}Error: Preparation step failed. See log file for more info.${NC}"
#         exit 1
#     else
#     echo -e ${LIGHT_GREEN}"Preparation successful!"${NC}
#     sleep 1.0
#     fi
# }

#Energy minimization loader
energy_minimization_loader() {
    show_spinner $! "Running energy minimization"
    wait $!
    if [ $? -ne 0 ]; then
        echo -e "${LIGHT_RED}Error: Failed minimize energy. See log file for more info.${NC}"
        exit 1
    else
        echo -e ${LIGHT_GREEN}"Energy minimized successfully"${NC}
        sleep 1.0
    fi
}

#Equilibration preparation loader
equilibration_preparation_loader() {
    show_spinner $! "Preparing for $equilibration_step_name"
    wait $!
    if [ $? -ne 0 ]; then
        echo -e "${LIGHT_RED}Error: $equilibration_step_name preparation failed. See log file for more info.${NC}"
        exit 1
    else
        echo -e ${LIGHT_GREEN}"$equilibration_step_name preparation successful"${NC}
        sleep 1.0
    fi
}

#Equilibration loader
equilibration_loader() {
    show_spinner $! "Running $equilibration_step_name"
    wait $!
    if [ $? -ne 0 ]; then
        echo -e "${LIGHT_RED}Error: $equilibration_step_name failed. See log file for more info.${NC}"
        exit 1
    else
        echo -e ${LIGHT_GREEN}"$equilibration_step_name done successfully"${NC}
        sleep 1.0
    fi
}

#check internet connection
check_internet() {
    if ping -c 1 -W 1 8.8.8.8 &>/dev/null; then
        echo -e "Status [${LIGHT_GREEN}Online${NC}]"
    else
        echo -e "Status [${LIGHT_RED}Offline${NC}]"
        echo -e "${LIGHT_RED}It is recommended to connect to the internet while process is going on."
        echo -e "If any dependencies are missing then you may not able to download.${NC}"
    fi
}

#Check dependencies
check_dependencies() {
    command -v gmx >/dev/null 2>&1 || {
        echo -e ${LIGHT_RED} "GROMACS not found. It is necessary to install GROMACS.${NC}" >&2
        sleep 1.0
        echo "Installing GROMACS..."
        sudo apt-get install gromacs
        exit 1
    }
    command -v wget >/dev/null 2>&1 || {
        echo -e ${LIGHT_RED} "wget not found. It is necessary to install wget.${NC}" >&2
        sleep 1.0
        echo "Installing wget..."
        sudo apt-get install wget
        exit 1
    }
}

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check Python3 and pip3 installation
if command_exists python3; then
    if command_exists pip3; then
        # Check if networkx is installed and its version
        networkx_version=$(pip3 show networkx 2>/dev/null | grep Version | awk '{print $2}')
        if [ -n "$networkx_version" ]; then
            if [ "$networkx_version" != "2.3" ]; then
                echo "This tool requires networkx v2.3. You are using version $networkx_version"
                echo "Do you want to continue installing networkx v2.3? (y/n)"
                read install_choice
                if [ "$install_choice" == "y" ]; then
                    pip3 install networkx==2.3
                fi
            fi
        else
            echo -e ${LIGHT_RED} "networkx is not installed. ${NC}"
            echo "Installing networkx v2.3"
            pip3 install networkx==2.3
        fi
    else
        echo -e ${LIGHT_RED} "pip3 is not installed ${NC}"
        echo "Installing pip3"
        sudo apt install python3-pip
    fi
else
    echo -e ${LIGHT_RED} "Python3 is not installed ${NC}"
    echo "Installing Python3"
    sudo apt-get install python3
fi

# Function to prompt user for input
prompt_user() {
    read -p "$1" choice
    echo "$choice"
}

force_field() {
    echo -e "${LIGHT_BLUE}Select a force field:${NC}"
    PS3="Enter your choice: "
    forcefields=("charmm36" "amber99sb" "charmm27" "gromos54a7" "oplsaa" "Other")
    select ff in "${forcefields[@]}"; do
        case $ff in
        "Other")
            read -p "Enter custom force field: " ff
            break
            ;;
        *)
            break
            ;;
        esac
    done
}

water_model() {
    echo -e "${LIGHT_BLUE}Select a water model:${NC}"
    PS3="Enter your choice: "
    watermodels=("spce" "tip3p" "tip4p" "tip5p" "Other")
    select wm in "${watermodels[@]}"; do
        case $wm in
        "Other")
            read -p "Enter custom water model: " wm
            break
            ;;
        *)
            break
            ;;
        esac
    done
}

# Function to check if a file exists and prompt to overwrite
check_file_exists() {
    local file=$1
    if [ -f "$file" ]; then
        echo -e ${LIGHT_CYAN}"File '$file' already exists."
        while true; do
            read -p "Do you want to continue and overwrite the file? (y/n): " choice
            echo -e ${NC}
            case $choice in
            [Yy]*)
                echo "Proceeding with overwriting the file."
                return 0
                ;;
            [Nn]*)
                echo "Aborting process."
                return 1
                ;;
            *) echo "Please answer yes or no." ;;
            esac
        done
    fi
    return 0
}

# Download protein structure
# Download protein structure
download_protein() {
    if [[ $(auto_check) == true ]]; then
        (wget -q "https://files.rcsb.org/download/${pdb_id}.pdb" -O "$target_file") &
        show_spinner $! "Downloading protein structure"
    else
        echo -e "${YELLOW}Download protein structure using PDB ID${NC}"
        read -p "Enter PDB ID (e.g., 1HNY): " pdb_id

        # Validate PDB ID format
        if [[ ! "$pdb_id" =~ ^[0-9A-Za-z]{4}$ ]]; then
            echo -e "${LIGHT_RED}Error: Invalid PDB ID format. Please enter a valid 4-character PDB ID.${NC}"
            return 1
        fi

        # Prepare target file path
        local target_file="$project_dir/${pdb_id}.pdb"

        # Attempt download
        echo -e "${CYAN}Downloading PDB structure for ID: $pdb_id...${NC}"
        (wget -q "https://files.rcsb.org/download/${pdb_id}.pdb" -O "$target_file") &
        show_spinner $! "Downloading protein structure"

        # Check download success
        if [[ -s "$target_file" ]]; then
            echo -e "${LIGHT_GREEN}Protein structure downloaded successfully! File saved at: $target_file${NC}"
            mv $target_file $project_dir/protein.pdb
        else
            echo -e "${LIGHT_RED}Error: Failed to download PDB structure. Please verify the PDB ID and your internet connection.${NC}"
            rm -f "$target_file" # Clean up incomplete file
            return 1
        fi
        sleep 1.0
        return 0
    fi
}

# Function to fix PDB file using PDBFixer
pdb_fixer() {
    echo
    pdbfixer --pdbid="$pdb_id" --keep-heterogens=none --add-residues --replace-nonstandard --add-atoms=all --ph=7.0 --output=$project_dir/protein.pdb --verbose >/dev/null 2>&1 &
    pdbfix_loader
}

# Function to remove HETATM lines
remove_hetatm() {
    if grep -q "HETATM" $project_dir/protein.pdb; then
        echo "Removing HETATM entries from protein.pdb..."
        sed -i '/^HETATM/d' $project_dir/protein.pdb
    fi
}

# Function to generate protein topology
generate_protein_topology() {
    if [[ $(auto_check) == true ]]; then
        remove_hetatm
        gmx pdb2gmx -f "$project_dir/protein.pdb" -o "$project_dir/protein.gro" -ff "$ff" -water "$wm" -ignh >/dev/null 2>&1
        if [ $exit_status -ne 0 ]; then
        echo -e "${LIGHT_RED}Error: Failed to generate protein topology. Attempting to fix PDB file.${NC}"
        
        # Call pdb_fixer
        pdb_fixer
        if [ $? -ne 0 ]; then
            echo -e "${LIGHT_RED}Error: PDB fixer failed. Exiting.${NC}"
            exit 1
        fi

        # Retry GROMACS pdb2gmx after fixing
        gmx pdb2gmx -f "$project_dir/protein.pdb" -o "$project_dir/protein.gro" -ff "$ff" -water "$wm" -ignh >/dev/null 2>&1 &
        show_spinner $! "Generating Protein Topology (After Fix)"
    else

    if [ ! -f "$project_dir/protein.pdb" ]; then
        echo -e "${LIGHT_RED}Error: protein.pdb file does not exist.${NC}"
        read -p "Do you want to download the protein structure (y/n): " response
        if [ "$response" == "y" ]; then
            download_protein
        else
            echo -e "${LIGHT_RED}Aborting: No PDB file provided.${NC}"
            exit 1
        fi
    fi

    # Remove HETATM entries
    remove_hetatm
    echo
    force_field
    echo
    water_model

    # Run GROMACS pdb2gmx with spinner
    echo
    echo "Generating Protein Topology..."
    gmx pdb2gmx -f "$project_dir/protein.pdb" -o "$project_dir/protein.gro" -ff "$ff" -water "$wm" -ignh >/dev/null 2>&1
    local exit_status=$?

    if [ $exit_status -ne 0 ]; then
        echo -e "${LIGHT_RED}Error: Failed to generate protein topology. Attempting to fix PDB file.${NC}"
        
        # Call pdb_fixer
        pdb_fixer
        if [ $? -ne 0 ]; then
            echo -e "${LIGHT_RED}Error: PDB fixer failed. Exiting.${NC}"
            exit 1
        fi

        # Retry GROMACS pdb2gmx after fixing
        gmx pdb2gmx -f "$project_dir/protein.pdb" -o "$project_dir/protein.gro" -ff "$ff" -water "$wm" -ignh >/dev/null 2>&1 &
        show_spinner $! "Generating Protein Topology (After Fix)"
        exit_status=$?
        
        if [ $exit_status -ne 0 ]; then
            echo -e "${LIGHT_RED}Error: Topology generation failed after fixing.${NC}"
            exit 1
        fi
    fi

    echo -e "${LIGHT_GREEN}Protein topology generated successfully.${NC}"
    sleep 1.0
    fi
}

    # sudo cp topol.top $project_dir/
    # sudo cp posre.itp $project_dir/

# Function to define box and solvate the system
define_box_and_solvate() {
    if [[ $(auto_check) == true ]]; then
        gmx editconf -f $project_dir/protein.gro -o $project_dir/newbox.gro -c -d 1.0 -bt $bt >/dev/null 2>&1 &
        box_loader
        gmx solvate -cp $project_dir/newbox.gro -cs $sol_mod.gro -p $project_dir/topol.top -o $project_dir/solv.gro >/dev/null 2>&1 &
        solvate_loader
    else
    echo
    echo "Defining box and solvating system..."
    echo
    if [ ! -f "$project_dir/protein.gro" ]; then
        echo -e ${LIGHT_RED} "protein.gro does not exist.${NC}"
        sleep 2.0
        exit 1
    fi
    check_file_exists "$project_dir/solv.gro" || return
    echo -e ${YELLOW}
    read -p "Do you want to continue with the default box type and solvation model (Cubic/SPC)? (y/n): " select_solvate_box
    echo -e ${NC}
    if [ $select_solvate_box == "y" ]; then
        gmx editconf -f $project_dir/protein.gro -o $project_dir/newbox.gro -c -d 1.0 -bt cubic >/dev/null 2>&1 &
        box_loader
        echo
        gmx solvate -cp $project_dir/newbox.gro -cs spc216.gro -p $project_dir/topol.top -o $project_dir/solv.gro >/dev/null 2>&1 &
        solvate_loader
    else
        echo -e ${YELLOW}"Select box type from the following${NC}"
        echo -e "${LIGHT_PURPLE}[${NC}01${LIGHT_PURPLE}]${NC} Cubic"
        #echo -e "${LIGHT_PURPLE}[${NC}02${LIGHT_PURPLE}]${NC} Octahedral"
        echo -e "${LIGHT_PURPLE}[${NC}02${LIGHT_PURPLE}]${NC} Dodecahedron"
        echo -e "${LIGHT_PURPLE}[${NC}03${LIGHT_PURPLE}]${NC} Triclinic"
        choice=$(prompt_user "Enter your choice [1-3]: ")
        echo -e ${NC}

        case $choice in
        1)
            gmx editconf -f $project_dir/protein.gro -o $project_dir/newbox.gro -c -d 1.0 -bt cubic >/dev/null 2>&1 &
            box_loader
            ;;
        #2) gmx editconf -f protein.gro -o newbox.gro -c -d 1.0 -bt octahedral || { echo -e ${LIGHT_RED} "Error: Failed to define the box.${NC}"
        #sleep 2.0; exit 1; } ;;
        2)
            gmx editconf -f $project_dir/protein.gro -o $project_dir/newbox.gro -c -d 1.0 -bt dodecahedron >/dev/null 2>&1 &
            box_loader
            ;;
        3)
            gmx editconf -f $project_dir/protein.gro -o $project_dir/newbox.gro -c -d 1.0 -bt triclinic >/dev/null 2>&1 &
            box_loader
            ;;
        *)
            echo -e "${LIGHT_RED}Invalid option! Please select between 1 and 3.${NC}"
            sleep 1.0
            ;;
        esac
        echo
        echo -e ${YELLOW}"Select solvation model from the following${NC}"
        echo -e "${LIGHT_PURPLE}[${NC}01${LIGHT_PURPLE}]${NC} SPC"
        #echo -e "${LIGHT_PURPLE}[${NC}02${LIGHT_PURPLE}]${NC} SPC/E"
        echo -e "${LIGHT_PURPLE}[${NC}02${LIGHT_PURPLE}]${NC} TIP3P"
        echo -e "${LIGHT_PURPLE}[${NC}03${LIGHT_PURPLE}]${NC} TIP4P"
        choice=$(prompt_user "Enter your choice [1-3]: ")
        echo -e ${NC}

        case $choice in
        1)
            gmx solvate -cp $project_dir/newbox.gro -cs spc216.gro -p $project_dir/topol.top -o $project_dir/solv.gro >/dev/null 2>&1 &
            solvate_loader
            ;;
        #2) gmx solvate -cp newbox.gro -cs spce216.gro -p topol.top -o solv.gro || { echo -e ${LIGHT_RED} "Error: Failed to solvate the system.${NC}"
        #sleep 2.0; exit 1; } ;;
        2)
            gmx solvate -cp $project_dir/newbox.gro -cs tip3p.gro -p $project_dir/topol.top -o $project_dir/solv.gro >/dev/null 2>&1 &
            solvate_loader
            ;;
        3)
            gmx solvate -cp $project_dir/newbox.gro -cs tip4p.gro -p $project_dir/topol.top -o $project_dir/solv.gro >/dev/null 2>&1 &
            solvate_loader
            ;;
        *)
            echo -e "${LIGHT_RED}Invalid option! Please select between 1 and 3.${NC}"
            sleep 1.0
            ;;
        esac
    fi
    fi
}

# Function to add ions
add_ions() {
    if [[ $(auto_check) == true ]]; then
        gmx grompp -f $project_dir/ions.mdp -c $project_dir/solv.gro -p $project_dir/topol.top -o $project_dir/ions.tpr >/dev/null 2>&1 &
        ion_tpr_loader
        printf "13\n" | gmx genion -s $project_dir/ions.tpr -o $project_dir/solv_ions.gro -p $project_dir/topol.top -pname NA -nname CL -neutral > /dev/null 2>&1 & ion_add_loader
    else
    if [ ! -f "$project_dir/solv.gro" ]; then
        echo -e ${LIGHT_RED} "solv.gro does not exist."${NC}
        sleep 2.0
        exit 1
    fi

    if [ ! -f "$project_dir/ions.mdp" ]; then
        echo "ions.mdp file does not exist."
        file_download_name="ions.mdp"
        (wget -nc "http://www.mdtutorials.com/gmx/lysozyme/Files/ions.mdp" >/dev/null 2>&1) &
        download_loader
    fi
    echo
    check_file_exists "$project_dir/solv_ions.gro" || return
    gmx grompp -f $project_dir/ions.mdp -c $project_dir/solv.gro -p $project_dir/topol.top -o $project_dir/ions.tpr >/dev/null 2>&1 &
    ion_tpr_loader
    echo -e ${LIGHT_YELLOW}
    read -p "Do you want to continue with the default ions (Both Na+ and Cl-)? (y/n): " select_ion_addition
    echo -e ${NC}
    if [ $select_ion_addition == "y" ]; then
        printf "13\n" | gmx genion -s $project_dir/ions.tpr -o $project_dir/solv_ions.gro -p $project_dir/topol.top -pname NA -nname CL -neutral > /dev/null 2>&1 & ion_add_loader
    else
        echo -e ${YELLOW}"Select box type from the following${NC}"
        echo -e "${LIGHT_PURPLE}[${NC}01${LIGHT_PURPLE}]${NC} Add Na+ and Cl- ions to neutralize the system"
        echo -e "${LIGHT_PURPLE}[${NC}02${LIGHT_PURPLE}]${NC} Add only Na+ ions"
        echo -e "${LIGHT_PURPLE}[${NC}03${LIGHT_PURPLE}]${NC} Add only Cl- ions"
        choice=$(prompt_user "Enter your choice [1-3]: ")
        echo -e ${NC}

        case $choice in
        1) printf "13\n" | gmx genion -s $project_dir/ions.tpr -o $project_dir/solv_ions.gro -p $project_dir/topol.top -pname NA -nname CL -neutral > /dev/null 2>&1 & ion_add_loader ;;
        2)
            gmx genion -s $project_dir/ions.tpr -o $project_dir/solv_ions.gro -p $project_dir/topol.top -pname NA >/dev/null 2>&1 &
            ion_add_loader
            ;;
        3)
            gmx genion -s $project_dir/ions.tpr -o $project_dir/solv_ions.gro -p $project_dir/topol.top -nname CL >/dev/null 2>&1 &
            ion_add_loader
            ;;
        *)
            echo -e "${LIGHT_RED}Invalid option! Please select between 1 and 3.${NC}"
            sleep 1.0
            ;;
        esac
    fi
    fi
}

# Function to run energy minimization
energy_minimization() {
    if [[ $(auto_check) == true ]]; then
        gmx grompp -f $project_dir/minim.mdp -c $project_dir/solv_ions.gro -p $project_dir/topol.top -o $project_dir/em.tpr >/dev/null 2>&1 &
    show_spinner $! "Preparing"
    gmx mdrun -v -deffnm $project_dir/em >/dev/null 2>&1 &
    energy_minimization_loader
    else
    # energy_minimization() {
    # echo -e "${YELLOW}Perform Energy Minimization${NC}"
    # echo -e "Choose an energy minimization method:"
    # echo -e "1. Steepest Descent"
    # echo -e "2. Conjugate Gradient"
    # echo -e "3. Skip energy minimization"

    # read -p "Enter your choice (1-3): " choice

    # case $choice in
    echo
    echo "Running energy minimization..."
    printf "\n"
    if [ ! -f "$project_dir/solv_ions.gro" ]; then
        echo -e ${LIGHT_RED} "solv_ions.gro does not exist." ${NC}
        sleep 2.0
        exit 1
    fi

    if [ ! -f "$project_dir/minim.mdp" ]; then
        echo "minim.mdp does not exist. Downloading..."
        file_download_name="minim.mdp"
        (wget -nc "http://www.mdtutorials.com/gmx/lysozyme/Files/minim.mdp") &
        download_loader
    fi
    check_file_exists "$project_dir/em.gro" || return
    gmx grompp -f $project_dir/minim.mdp -c $project_dir/solv_ions.gro -p $project_dir/topol.top -o $project_dir/em.tpr >/dev/null 2>&1 &
    show_spinner $! "Preparing"
    gmx mdrun -v -deffnm $project_dir/em >/dev/null 2>&1 &
    energy_minimization_loader
    echo
    #generating potential energy xvg file
    # echo -e "Calculating potential energy..."
    # gmx energy -f em.edr -o potential.xvg
    fi
}

NVT_equilibration() {
    equilibration_step_name="NVT equilibration"
    gmx grompp -f $project_dir/nvt.mdp -c $project_dir/em.gro -r $project_dir/em.gro -p $project_dir/topol.top -o $project_dir/nvt.tpr >/dev/null 2>&1 &
    equilibration_preparation_loader
    echo
    gmx mdrun -deffnm $project_dir/nvt -v >/dev/null 2>&1 &
    equilibration_loader
    echo
    #Analyzing the temperature progression
    # echo "Analyzing the temperature progression..."
    # gmx energy -f nvt.edr -o temperature.xvg #generate temperature.xvg file
}

NPT_equilibration() {
    equilibration_step_name="NPT equilibration"
    gmx grompp -f $project_dir/npt.mdp -c $project_dir/nvt.gro -r $project_dir/nvt.gro -t $project_dir/nvt.cpt -p $project_dir/topol.top -o $project_dir/npt.tpr >/dev/null 2>&1 &
    equilibration_preparation_loader
    echo
    gmx mdrun -deffnm $project_dir/npt -v >/dev/null 2>&1 &
    equilibration_loader
    echo
    #Analyzing the pressure and density progression
    # echo "Analyzing the pressure and density progression..."
    # gmx energy -f npt.edr -o pressure.xvg
    # gmx energy -f npt.edr -o density.xvg
}

update_eq_steps() {
    #User input simulation time
    echo -e ${YELLOW}"Do you want to continue with default equilibration time (100ps)?"
    echo -e "${LIGHT_PURPLE}[${NC}01${LIGHT_PURPLE}]${NC} Yes, continue"
    echo -e "${LIGHT_PURPLE}[${NC}02${LIGHT_PURPLE}]${NC} No, enter custom value (in ps)"
    echo
    read -p "Enter your choice [1-2]: " eq_time
    echo -e ${NC}
    case $eq_time in
    1) eq_nsteps=50000 ;;
    2)
        # Custom equilibration time in ps
        read -p "Set simulation time in picoseconds (ps): " eq_time_ps
        if [[ "$eq_time_ps" =~ ^[0-9]+$ && "$eq_time_ps" -gt 0 ]]; then
            eq_nsteps=$(echo "$eq_time_ps / 0.002" | bc)
            echo "Custom equilibration time of ${eq_time_ps} ps selected (${eq_nsteps} steps)."
        else
            echo -e "${LIGHT_RED}Invalid input! Please enter a positive numeric value for time in ps.${NC}"
            sleep 2.0
            return
        fi
        ;;
    *)
        echo -e "${LIGHT_RED}Invalid option! Please select between 1 and 3.${NC}"
        sleep 2.0
        return
        ;;
    esac

    # Update nsteps in nvt.mdp and npt.mdp
    sed -i "s/^nsteps.*/nsteps = $eq_nsteps/" $project_dir/nvt.mdp
    sed -i "s/^nsteps.*/nsteps = $eq_nsteps/" $project_dir/npt.mdp
    # echo "Updated nsteps in nvt and npt.mdp:"
    # grep "nsteps" nvt.mdp and npt.mdp  # Verify the update in nvt and npt.mdp

    # Clear old .tpr file (optional but recommended)
    rm -f $project_dir/nvt.tpr
    rm -f $project_dir/npt.tpr
}

# Function to run equilibrium
equilibrium() {
    if [[ "$param_auto_file" == "run_type=auto" ]]; then
        NVT_equilibration
        NPT_equilibration
    else
    while true; do
        echo
        echo -e "${YELLOW}--------------------------"
        echo -e "      Equilibrium Menu"
        echo -e "--------------------------${NC}"
        echo -e "${LIGHT_PURPLE}[${NC}01${LIGHT_PURPLE}]${NC} NVT Equilibration"
        echo -e "${LIGHT_PURPLE}[${NC}02${LIGHT_PURPLE}]${NC} NPT Equilibration"
        echo -e "${LIGHT_PURPLE}[${NC}03${LIGHT_PURPLE}]${NC} Both NVT & NPT"
        echo -e "${LIGHT_PURPLE}[${NC}04${LIGHT_PURPLE}]${NC} Back to Main Menu"
        echo -e ${YELLOW}"--------------------------${NC}"
        echo -e ${LIGHT_YELLOW}
        read -p "Enter your choice [1-4]: " equil_choice
        echo -e ${NC}
        case $equil_choice in
        1)
            if [ ! -f "$project_dir/em.gro" ]; then
                echo -e ${LIGHT_RED} "em.gro does not exist."${NC}
                sleep 2.0
                exit 1
            fi

            if [ ! -f "$project_dir/nvt.mdp" ]; then
                echo "nvt.mdp does not exist. Downloading..."
                file_download_name="nvt.mdp"
                (wget -nc "http://www.mdtutorials.com/gmx/lysozyme/Files/nvt.mdp") &
                download_loader
            fi

            check_file_exists "$project_dir/nvt.gro" || return

            update_eq_steps
            NVT_equilibration
            #2>/dev/null & show_spinner $! "Running NVT Equilibration"
            ;;
        2)
            if [ ! -f "$project_dir/nvt.gro" ]; then
                echo -e ${LIGHT_RED} "nvt.gro does not exist."${NC}
                exit 1
            fi

            if [ ! -f "$project_dir/npt.mdp" ]; then
                echo "npt.mdp does not exist. Downloading..."
                file_download_name="npt.mdp"
                (wget -nc "http://www.mdtutorials.com/gmx/lysozyme/Files/npt.mdp") &
                download_loader
            fi

            check_file_exists "$project_dir/npt.gro" || return

            update_eq_steps
            NPT_equilibration
            #2>/dev/null & show_spinner $! "Running NPT Equilibration"
            ;;
        3)
            if [ ! -f "$project_dir/em.gro" ]; then
                echo -e ${LIGHT_RED} "em.gro does not exist."${NC}
                sleep 2.0
                exit 1
            fi

            if [ ! -f "$project_dir/nvt.mdp" ]; then
                echo "nvt.mdp does not exist. Downloading..."
                file_download_name="nvt.mdp"
                (wget -nc "http://www.mdtutorials.com/gmx/lysozyme/Files/nvt.mdp") &
                download_loader
            fi
            if [ ! -f "$project_dir/npt.mdp" ]; then
                echo "npt.mdp does not exist. Downloading..."
                file_download_name="npt.mdp"
                (wget -nc "http://www.mdtutorials.com/gmx/lysozyme/Files/npt.mdp") &
                download_loader
            fi

            # Run NVT and NPT in the background, suppress both stdout and stderr
            # Run NVT and NPT in the background, suppressing output, but show loader
            update_eq_steps
            NVT_equilibration
            NPT_equilibration
            sleep 1.0
            # Wait for both NVT and NPT processes to finish
            wait
            manual_run
            ;;
        4)
            echo
            echo "Returning to main menu..."
            return
            ;;
        *)
            echo -e "${LIGHT_RED}Invalid option! Please select between 1 and 3.${NC}"
            sleep 1.0
            ;;
        esac
    done
fi
}

# Update nsteps in md.mdp and regenerate md.tpr
update_simulation_steps() {
    # Update nsteps in md.mdp
    sed -i "s/^nsteps.*/nsteps = $md_nsteps/" $project_dir/md.mdp
    # echo "Updated nsteps in md.mdp:"
    # grep "nsteps" md.mdp  # Verify the update in md.mdp

    # Clear old .tpr file (optional but recommended)
    rm -f $project_dir/md.tpr

    # Regenerate md.tpr using the updated md.mdp
    gmx grompp -f $project_dir/md.mdp -c $project_dir/npt.gro -t $project_dir/npt.cpt -p $project_dir/topol.top -o $project_dir/md.tpr >/dev/null 2>&1 || {
        echo -e ${LIGHT_RED} "Error: Failed to prepare production MD.${NC}"
        exit 1
    }

    # Confirm the update in the new md.tpr file
    # echo "Confirming nsteps in md.tpr:"
    # gmx dump -s md.tpr | grep nsteps
}

# prepare_md_production() {
#     gmx grompp -f md.mdp -c npt.gro -t npt.cpt -p topol.top -o md.tpr || {
#         echo -e ${LIGHT_RED} "Error: Failed to prepare production MD.${NC}"
#         sleep 2.0
#         exit 1
#     }
# }

# Function to run production MD
production_md() {
    if [[ "$param_auto_file" == "run_type=auto" ]]; then
        if [[ -n "$gpu_info" ]]; then
        echo "GPU detected:"
        echo "$gpu_info"

        # Check if the GPU is an NVIDIA card and if nvidia-smi is available
        if command -v nvidia-smi &>/dev/null; then
            echo -e ${LIGHT_CYAN} "NVIDIA GPU detected. Running nvidia-smi for details:${NC}"
            nvidia-smi
            sleep 3.0

            # Measure and show time while running the simulation, suppress output
            start_time=$(date +%s) # Get start time
            gmx mdrun -deffnm $project_dir/md -v -nb gpu >/dev/null 2>&1 &
            show_spinner $! "Running MD Simulation"
            end_time=$(date +%s) # Get end time

            elapsed=$((end_time - start_time)) # Calculate elapsed time in seconds
            echo "Elapsed time: $elapsed seconds"
            show_spinner $! "Running MD Simulation on GPU"

        else
            echo -e ${LIGHT_CYAN} "NVIDIA GPU not detected or nvidia-smi command not found. Running simulation on CPU...${NC}"
            sleep 3.0

            # Measure and show time while running the simulation, suppress output
            start_time=$(date +%s) # Get start time
            gmx mdrun -deffnm $project_dir/md -v >/dev/null 2>&1 &
            show_spinner $! "Running MD Simulation"
            end_time=$(date +%s) # Get end time

            elapsed=$((end_time - start_time)) # Calculate elapsed time in seconds
            echo "Elapsed time: $elapsed seconds"
            show_spinner $! "Running MD Simulation on CPU"
        fi
    else
        echo -e ${LIGHT_CYAN}"No GPU detected. Running simulation on CPU..."${NC}
        sleep 3.0

        # Measure and show time while running the simulation, suppress output
        start_time=$(date +%s) # Get start time
        gmx mdrun -deffnm $project_dir/md -v >/dev/null 2>&1 &
        show_spinner $! "Running MD Simulation"
        end_time=$(date +%s) # Get end time

        elapsed=$((end_time - start_time)) # Calculate elapsed time in seconds
        echo "Elapsed time: $elapsed seconds"
        sleep 2.0
    fi
    else
    echo
    # Check for required files
    if [ ! -f "$project_dir/npt.gro" ]; then
        echo -e ${LIGHT_RED} "npt.gro does not exist.${NC}"
        sleep 2.0
        exit 1
    fi

    if [ ! -f "$project_dir/md.mdp" ]; then
        echo "md.mdp does not exist. Downloading..."
        file_download_name="md.mdp"
        (wget -nc "http://www.mdtutorials.com/gmx/lysozyme/Files/md.mdp") &
        download_loader
    fi

    check_file_exists "$project_dir/md.xtc" || return

    #User input simulation time
    echo -e ${YELLOW}"Do you want to continue with default simulation time (10ns)?"
    echo -e "${LIGHT_PURPLE}[${NC}01${LIGHT_PURPLE}]${NC} Yes, continue"
    echo -e "${LIGHT_PURPLE}[${NC}02${LIGHT_PURPLE}]${NC} No, enter custom value"
    echo
    read -p "Enter your choice [1-2]: " simulation_time
    echo -e ${NC}
    case $simulation_time in
    1) md_nsteps=5000000 ;;
    2)
        read -p "Set simulation time (ns): " md_time_ns
        md_time_ps=$(echo "$md_time_ns * 1000" | bc)
        md_nsteps=$(echo "$md_time_ps / 0.002" | bc)
        ;;
    *)
        echo -e "${LIGHT_RED}Invalid option! Please select between 1 and 3.${NC}"
        sleep 2.0
        return
        ;;
    esac

    # Update nsteps and generate new md.tpr file
    update_simulation_steps

    # Prepare for production MD
    # prepare_md_production > /dev/null 2>&1 & show_spinner $! "Processing Preparation"

    echo -e ${LIGHT_GREEN}"Preparation DONE!${NC}"

    # Check for any GPU using lspci
    gpu_info=$(lspci | grep -i vga)

    if [[ -n "$gpu_info" ]]; then
        echo "GPU detected:"
        echo "$gpu_info"

        # Check if the GPU is an NVIDIA card and if nvidia-smi is available
        if command -v nvidia-smi &>/dev/null; then
            echo -e ${LIGHT_CYAN} "NVIDIA GPU detected. Running nvidia-smi for details:${NC}"
            nvidia-smi
            sleep 3.0

            # Measure and show time while running the simulation, suppress output
            start_time=$(date +%s) # Get start time
            gmx mdrun -deffnm $project_dir/md -v -nb gpu >/dev/null 2>&1 &
            show_spinner $! "Running MD Simulation"
            end_time=$(date +%s) # Get end time

            elapsed=$((end_time - start_time)) # Calculate elapsed time in seconds
            echo "Elapsed time: $elapsed seconds"
            show_spinner $! "Running MD Simulation on GPU"

        else
            echo -e ${LIGHT_CYAN} "NVIDIA GPU not detected or nvidia-smi command not found. Running simulation on CPU...${NC}"
            sleep 3.0

            # Measure and show time while running the simulation, suppress output
            start_time=$(date +%s) # Get start time
            gmx mdrun -deffnm $project_dir/md -v >/dev/null 2>&1 &
            show_spinner $! "Running MD Simulation"
            end_time=$(date +%s) # Get end time

            elapsed=$((end_time - start_time)) # Calculate elapsed time in seconds
            echo "Elapsed time: $elapsed seconds"
            show_spinner $! "Running MD Simulation on CPU"
        fi
    else
        echo -e ${LIGHT_CYAN}"No GPU detected. Running simulation on CPU..."${NC}
        sleep 3.0

        # Measure and show time while running the simulation, suppress output
        start_time=$(date +%s) # Get start time
        gmx mdrun -deffnm $project_dir/md -v >/dev/null 2>&1 &
        show_spinner $! "Running MD Simulation"
        end_time=$(date +%s) # Get end time

        elapsed=$((end_time - start_time)) # Calculate elapsed time in seconds
        echo "Elapsed time: $elapsed seconds"
        sleep 2.0
    fi
fi
    # Wait for background processes to finish
    wait
}

# Function to run analysis
run_analysis() {
    echo
    echo "Running analysis..."
    while true; do
        echo "---------------------------"
        echo "       Analysis Menu"
        echo "---------------------------"
        echo "1) Recentering and Rewrapping Coordinates"
        echo "2) RMSD"
        echo "3) Temperature"
        echo "4) Pressure"
        echo "5) Density"
        echo "6) Potential Energy"
        echo "7) Back to Main Menu"
        read -p "Enter your choice [1-7]: " analysis_choice

        case $analysis_choice in
        1)
            echo
            echo "Recentering and Rewrapping Coordinates..."
            echo
            if [ ! -f "$project_dir/md.xtc" ]; then
                echo -e ${LIGHT_RED} "md.xtc does not exist.${NC}"
                exit 1
            fi
            check_file_exists "$project_dir/md_noPBC.xtc" || return
            gmx trjconv -s $project_dir/md.tpr -f $project_dir/md.xtc -o $project_dir/md_noPBC.xtc -pbc mol -center || exit 1
            ;;
        2)
            echo
            echo "Finding RMSD..."
            echo
            if [ ! -f "$project_dir/md_noPBC.xtc" ]; then
                echo -e ${LIGHT_RED} "md_noPBC.xtc does not exist.${NC}"
                exit 1
            fi
            check_file_exists "$project_dir/rmsd.xvg" || return
            gmx rms -s $project_dir/md.tpr -f $project_dir/md_noPBC.xtc -o $project_dir/rmsd.xvg -tu ns || exit 1
            ;;
        3)
            echo
            echo "Analyzing Temperature Progression..."
            echo
            if [ ! -f "$project_dir/nvt.edr" ]; then
                echo -e ${LIGHT_RED} "nvt.edr does not exist.${NC}"
                exit 1
            fi
            check_file_exists "$project_dir/temperature.xvg" || return
            gmx energy -f $project_dir/nvt.edr -o $project_dir/temperature.xvg #generate temperature.xvg file
            ;;
        4)
            echo
            echo "Analyzing Pressure Progression..."
            echo
            if [ ! -f "$project_dir/npt.edr" ]; then
                echo -e ${LIGHT_RED} "npt.edr does not exist.${NC}"
                exit 1
            fi
            check_file_exists "$project_dir/pressure.xvg" || return
            gmx energy -f $project_dir/npt.edr -o $project_dir/pressure.xvg #generate temperature.xvg file
            ;;
        5)
            echo
            echo "Analyzing Density Progression..."
            echo
            if [ ! -f "$project_dir/npt.edr" ]; then
                echo -e ${LIGHT_RED} "npt.edr does not exist.${NC}"
                exit 1
            fi
            check_file_exists "$project_dir/density.xvg" || return
            gmx energy -f $project_dir/npt.edr -o $project_dir/density.xvg #generate temperature.xvg file
            ;;
        6)
            echo
            echo "Calculating Potential Energy..."
            echo
            if [ ! -f "$project_dir/em.edr" ]; then
                echo -e ${LIGHT_RED} "em.edr does not exist.${NC}"
                exit 1
            fi
            check_file_exists "$project_dir/potential.xvg" || return
            gmx energy -f $project_dir/em.edr -o $project_dir/potential.xvg #generate temperature.xvg file
            ;;
        7)
            echo
            echo "Returning to Main Menu..."
            return
            ;;
        *)
            echo "${LIGHT_RED}Invalid option! Please select between 1 and 7.${NC}"
            sleep 1.0
            ;;
        esac
    done
}

# manual_run(){
# while true; do
#     echo "---------------------------"
#     echo "       Select your run"
#     echo "---------------------------"
#     echo "1) Default (1ns)"
#     echo "2) Advanced"
#     echo "3) Exit"
#     echo "---------------------------"
#     read -p "Enter your choice [1-3]: " run_choice

#     case $run_choice in
#         1)
#             manual_steps ;;
#         2)
#             echo
#             echo "Set your own values"
#             echo
#             read -p "Set NVT steps (default: 50000): " nvt_steps
#             read -p "Set NPT steps (default: 50000): " npt_steps
#             read -p "Set simulation time (default: 1ns): " md_time_ns
#             md_time_ps=$(echo "$md_time_ns * 1000" | bc)
#             md_nsteps=$(echo "$md_time_ps / 0.002" | bc)
#             echo
#             read -p "Are you confirm? Do you want to contine? (y/n): " adv_confirm
#             if [ $adv_confirm == "y" ]; then
#                 sed -i "s/^nsteps.*/nsteps = $npt_steps/" npt.mdp
#                 sed -i "s/^nsteps.*/nsteps = $nvt_steps/" nvt.mdp
#                 sed -i "s/^nsteps.*/nsteps = $md_nsteps/" md.mdp
#                 manual_steps
#             else
#                 exit 1
#             fi
#             ;;
#         3)
#             echo
#             echo "Exiting..."
#             exit 1
#             ;;
#         *)  echo -e "${LIGHT_RED}Invalid option! Please select between 1 and 8.${NC}"
#             sleep 1.0
#             exit 0 ;;
#     esac
# done
# }

automatic_run() {
    sed -i '1s/.*/run_type=auto/' run_parameters.conf
    echo -e "${LIGHT_CYAN}Automatic Run Selected${NC}"
    echo
    echo -e "${YELLOW}Set parameters for simulation${NC}"
    echo -e "${LIGHT_BLUE}"
    local param_file="run_parameters.conf"

    #Download Protein - Enter PDB ID
    read -p "Enter PDB ID (e.g., 1HNY): " pdb_id
    echo -e "${NC}"
    # Validate PDB ID format
    if [[ ! "$pdb_id" =~ ^[0-9A-Za-z]{4}$ ]]; then
        echo -e "${LIGHT_RED}Error: Invalid PDB ID format. Please enter a valid 4-character PDB ID.${NC}"
        return 1
    fi

    # Parameter Initialization
    # local ff_choice wm_choice sim_time_ns sim_time_ps sim_steps force_field water_model
    force_field
    echo -e "${LIGHT_YELLOW}Selected force field:${LIGHT_GREEN} $ff ${NC}"
    echo
    water_model
    echo -e "${LIGHT_YELLOW}Selected water model:${LIGHT_GREEN} $wm ${NC}"
    echo
    # Box type selection
    echo -e "${LIGHT_BLUE}Select a box type:${NC}"
    PS3="Enter your choice: "
    box_types=("cubic" "dodecahedron" "triclinic" "Other")
    select bt in "${box_types[@]}"; do
        case $bt in
        "Other")
            read -p "Enter custom box type: " box_type
            break
            ;;
        *)
            box_type=$bt
            break
            ;;
        esac
    done
    echo -e "${LIGHT_YELLOW}Selected box type:${LIGHT_GREEN} $box_type ${NC}"
    echo 
    # Solvation mode selection
    echo -e "${LIGHT_BLUE}Select a solvation mode:${NC}"
    PS3="Enter your choice: "
    watermodels=("spce" "tip3p" "tip4p" "tip5p" "Other")
    select sol_mod in "${watermodels[@]}"; do
        case $sol_mod in
        "Other")
            read -p "Enter custom water model: " wm
            break
            ;;
        *)
            break
            ;;
        esac
    done
    echo -e "${LIGHT_YELLOW}Selected solvation model:${LIGHT_GREEN} $sol_mod ${NC}"
    echo -e "${LIGHT_BLUE}"
    read -p "Set equilibration time in ps (Default 100ps): " eq_time_ps
    
    if [[ "$eq_time_ps" =~ ^[0-9]+$ && "$eq_time_ps" -gt 0 ]]; then
        eq_nsteps=$(echo "$eq_time_ps / 0.002" | bc)
    else
        echo -e "${LIGHT_RED}Invalid input! Please enter a positive numeric value for time in ps.${NC}"
        sleep 2.0
        return
    fi
    sed -i "s/^nsteps.*/nsteps = $eq_nsteps/" $project_dir/nvt.mdp
    sed -i "s/^nsteps.*/nsteps = $eq_nsteps/" $project_dir/npt.mdp

    # Prompt for Simulation Time
    echo -e "${LIGHT_BLUE}"
    read -p "Enter simulation time in nanoseconds: " md_time_ns
    md_time_ps=$(echo "$md_time_ns * 1000" | bc)
    md_steps=$(echo "$md_time_ps / 0.002" | bc)  # Assuming 2fs timestep
    sed -i "s/^nsteps.*/nsteps = $md_steps/" $project_dir/md.mdp
    echo -e "${NC}"
    

    # Confirm Choices
    echo
    echo -e "${YELLOW}Summary of Input Parameters: ${NC}"
    echo -e "${LIGHT_CYAN}PDB ID:${NC} $pdb_id ${NC}"
    echo -e "${LIGHT_CYAN}Force Field:${NC} $ff ${NC}"
    echo -e "${LIGHT_CYAN}Water Model:${NC} $wm ${NC}"
    echo -e "${LIGHT_CYAN}Box Type:${NC} $bt ${NC}"
    echo -e "${LIGHT_CYAN}Solvation Model:${NC} $sol_mod ${NC}"
    echo -e "${LIGHT_CYAN}Equilibration Time:${NC} $eq_time_ps ps ($eq_nsteps steps) ${NC}"
    echo -e "${LIGHT_CYAN}Simulation Time:${NC} $md_time_ns ns ($md_steps steps) ${NC}"
    echo -e "${LIGHT_YELLOW}"
    read -p "Do you want to save and proceed with these settings? (y/n): " confirm
    if [[ "$confirm" != "y" ]]; then
        echo "Aborting setup."
        exit 1
    fi
    echo -e "${NC}"

    # Save Parameters to File
    echo "Saving parameters to $param_file..."
    sleep 1.0
    cat > "$param_file" <<EOF
pdb_id=$pdb_id
force_field=$ff
water_model=$wm
box_type=$bt
solvate_model=$sol_mod
equilibration_time=$eq_time_ps
equilibration_steps=$eq_nsteps
simulation_time_ns=$md_time_ns
simulation_steps=$md_steps
EOF

    echo -e "${LIGHT_GREEN}Parameters saved. Starting the setup and run process...${NC}"
    sleep 1.0

}

test_run() {
    sed -i "s/^nsteps.*/nsteps = 500/" $project_dir/npt.mdp
    sed -i "s/^nsteps.*/nsteps = 500/" $project_dir/nvt.mdp
    sed -i "s/^nsteps.*/nsteps = 5000/" $project_dir/md.mdp
    automatic_run
}

advanced_options() {
    echo -e "${YELLOW}Set custom values"
    echo
    read -p "Set NVT steps (default: 50000): " nvt_steps
    read -p "Set NPT steps (default: 50000): " npt_steps
    read -p "Set simulation time (default: 1ns): " md_time_ns
    md_time_ps=$(echo "$md_time_ns * 1000" | bc)
    md_nsteps=$(echo "$md_time_ps / 0.002" | bc)
    echo -e ${NC}
    read -p "Are you confirm? Do you want to contine? (y/n): " adv_confirm
    if [ $adv_confirm == "y" ]; then
        sed -i "s/^nsteps.*/nsteps = $npt_steps/" $project_dir/npt.mdp
        sed -i "s/^nsteps.*/nsteps = $nvt_steps/" $project_dir/nvt.mdp
        sed -i "s/^nsteps.*/nsteps = $md_nsteps/" $project_dir/md.mdp
        echo -e "${LIGHT_GREEN}Changes saved successfully...${NC}"
        echo
        sleep 2.0
        main_menu
    else
        exit 1
    fi
}

# main_menu() {
# while true; do
#     echo -e "${YELLOW}---------------------------"
#     echo -e "       Select run type"
#     echo -e "---------------------------${NC}"
#     echo "[1] Full run"
#     echo "[2] Step wise"
#     echo "[3] Exit"
#     echo "---------------------------"
#     echo -e ${LIGHT_YELLOW}

#     choice=$(prompt_user "Enter your choice [1-3]: ")
#     echo -e ${NC}

#     case $choice in
#         1) automatic_run ;;
#         2) manual_run ;;
#         3) echo -e "${LIGHT_GREEN}Thanks for using GROMACS!${NC}"
#            echo "Exiting..."
#            echo; exit 0 ;;
#         *) echo -e "${LIGHT_RED}Invalid option! Please select between 1 and 8.${NC}"
#         sleep 1.0 ;;
#     esac
# done
# }

manual_run() {
    sed -i '1s/.*/run_type=manual/' run_parameters.conf
    while true; do
        echo
        echo -e "${YELLOW}------------------------------------"
        echo -e "             Main Menu"
        echo -e "------------------------------------${NC}"
        echo -e "${LIGHT_PURPLE}[${NC}01${LIGHT_PURPLE}]${NC} Download Protein Structure"
        echo -e "${LIGHT_PURPLE}[${NC}02${LIGHT_PURPLE}]${NC} Generate Protein Topology"
        echo -e "${LIGHT_PURPLE}[${NC}03${LIGHT_PURPLE}]${NC} Define box and solvate the system"
        echo -e "${LIGHT_PURPLE}[${NC}04${LIGHT_PURPLE}]${NC} Add ions"
        echo -e "${LIGHT_PURPLE}[${NC}05${LIGHT_PURPLE}]${NC} Energy minimization"
        echo -e "${LIGHT_PURPLE}[${NC}06${LIGHT_PURPLE}]${NC} Equilibrium"
        echo -e "${LIGHT_PURPLE}[${NC}07${LIGHT_PURPLE}]${NC} Production MD"
        echo -e "${LIGHT_PURPLE}[${NC}08${LIGHT_PURPLE}]${NC} Analysis"
        echo -e "${LIGHT_PURPLE}[${NC}09${LIGHT_PURPLE}]${NC} Main menu"
        echo -e "${LIGHT_PURPLE}[${NC}10${LIGHT_PURPLE}]${NC} ${LIGHT_RED}Exit${NC}"
        echo -e "${YELLOW}------------------------------------${NC}"
        echo -e ${LIGHT_YELLOW}

        choice=$(prompt_user "Enter your choice [1-10]: ")
        echo -e ${NC}

        case $choice in
        1) download_protein ;;
        2) generate_protein_topology ;;
        3) define_box_and_solvate ;;
        4) add_ions ;;
        5) energy_minimization ;;
        6) equilibrium ;;
        7) production_md ;;
        8) run_analysis ;;
        9)
            banner
            main_menu
            ;;
        10)
            echo -e "${LIGHT_YELLOW}Thanks for using GRAVITy!${NC}"
            echo "Exiting..."
            echo
            exit 0
            ;;
        *)
            echo -e "${LIGHT_RED}Invalid option! Please select between 1 and 11.${NC}"
            sleep 1.0
            ;;
        esac
    done
}

banner() {
    # Main script loop
    clear
    echo
    # Print the colored ASCII art
    echo -e "${LIGHT_RED}  __________________    _________   ____.______________      ${RESET}"
    echo -e "${LIGHT_RED} /  _____/\\______   \\  /  _  \\   \\ /   /|   \\__    ___/${RESET}__.__. "
    echo -e "${LIGHT_RED}/   \\  ___ |       _/ /  /_\\  \\   Y   / |   | |    | ${RESET}<   |  | "
    echo -e "${LIGHT_RED}\\    \\_\\  \\|    |   \\/    |    \\     /  |   | |    |  ${RESET}\\___  | "
    echo -e "${LIGHT_RED} \\______  /|____|_  /\\____|__  /\\___/   |___| |____|  ${RESET}/ ____| "
    echo -e "${LIGHT_RED}        \\/        \\/         \\/                       ${RESET}\\/      "
    echo
    echo -e "${WHITE}  [${LIGHT_RED}G${NC}ROMACS ${LIGHT_RED}R${NC}apid ${LIGHT_RED}A${NC}nalysis & ${LIGHT_RED}V${NC}isualization ${LIGHT_RED}I${NC}nterface ${LIGHT_RED}T${NC}ool -y]${NC}"
    echo
}

main_menu() {
    while true; do
        echo -e "${YELLOW}--------------------------"
        echo -e "        Select Run"
        echo -e "--------------------------${NC}"
        echo -e "${LIGHT_PURPLE}[${NC}1${LIGHT_PURPLE}]${NC} ${WHITE}Manual run${NC}"
        echo -e "${LIGHT_PURPLE}[${NC}2${LIGHT_PURPLE}]${NC} ${WHITE}Automatic run${NC}"
        echo -e "${LIGHT_PURPLE}[${NC}3${LIGHT_PURPLE}]${NC} ${WHITE}Test run (10ps)${NC}"
        echo -e "${LIGHT_PURPLE}[${NC}4${LIGHT_PURPLE}]${NC} ${WHITE}Advanced Options${NC}"
        echo -e "${LIGHT_PURPLE}[${NC}5${LIGHT_PURPLE}]${NC} ${LIGHT_RED}Exit${NC}"
        echo -e "${YELLOW}--------------------------${NC}"
        echo -e ${LIGHT_YELLOW}

        choice=$(prompt_user "Enter your choice [1-5]: ")
        echo -e ${NC}

        case $choice in
        1)
            clear
            manual_run
            ;;
        2) automatic_run ;;
        3) test_run ;;
        4) advanced_options ;;
        5)
            echo -e "${YELLOW}Thanks for using GRAVITy!${NC}"
            echo "Exiting..."
            echo
            exit 0
            ;;
        *)
            echo -e "${LIGHT_RED}Invalid option! Please select between 1 and 5.${NC}"
            sleep 1.0
            ;;
        esac
    done
}
#echo -e "${LIGHT_WH}Please keep protein file ready in the working "
#echo -e "directory and rename it as 'protein.pdb'${NC}"
echo

#HOME SCREEN
banner
check_internet
echo
check_dependencies
echo -e "${LIGHT_CYAN}Simulation type: Protein in water${NC}"
echo
main_menu

#!/bin/bash
#Author: Atharva Tilewale
#Protein simulation made easy with GRAVITy

# Change working directory
project_dir=$(head -n 1 "/etc/GRAVITy/current_dir.txt")
cd $project_dir
# Source the color script
source /etc/GRAVITy/colors
echo start >$project_dir/run_parameters.conf
source $project_dir/run_parameters.conf
param_file=$project_dir/run_parameters.conf

# Function to stop the spinner if an error occurs
stop_spinner() {
    if [ ! -z "$spinner_pid" ]; then
        kill $spinner_pid
    fi
}

# Function to display a rotating loader with custom text
show_spinner() {
    local pid=$1      # Process ID to monitor
    local message=$2  # Custom loading message
    local spin='-\|/' # Spinner characters
    local i=0

    # Loop to display the spinner until the task completes
    while kill -0 $pid 2>/dev/null; do
        i=$(((i + 1) % 4))
        printf "\r${spin:$i:1} %s..." "$message"
        sleep 0.1
    done
    printf "\r%s...        \n" "$message"
}

#Loaders
#Download loader
download_loader() {
    show_spinner $! "Downloading $file_download_name"
    wait $!
    if [ $? -ne 0 ]; then
        echo -e "${LIGHT_RED}Error: Download failed. Please check your internet connection and try again.${NC}"
        exit 1
    else
        echo -e ${LIGHT_GREEN}$file_download_name "downloaded successfully!"${NC}
        sleep 1.0
    fi
}

pdbfix_loader() {
    show_spinner $! "Fixing PDB File"
    wait $!
    if [ $? -ne 0 ]; then
        echo -e "${LIGHT_RED}Error: Failed to fix PDB file. See log file for more info.${NC}"
        exit 1
    else
        echo -e ${LIGHT_GREEN}"PDB file fixed successfully. Restarting generating protein topology."${NC}
        sleep 3.0
    fi
}

#Energy minimization loader
energy_minimization_loader() {
    show_spinner $! "Running energy minimization"
    wait $!
    if [ $? -ne 0 ]; then
        echo -e "${LIGHT_RED}Error: Failed minimize energy. See log file for more info.${NC}"
        exit 1
    else
        echo -e ${LIGHT_GREEN}"Energy minimized successfully"${NC}
        sleep 1.0
    fi
}

#check internet connection
check_internet() {
    if ping -c 1 -W 1 8.8.8.8 &>/dev/null; then
        echo -e "Status [${LIGHT_GREEN}Online${NC}]"
    else
        echo -e "Status [${LIGHT_RED}Offline${NC}]"
        echo -e "${LIGHT_RED}It is recommended to connect to the internet while process is going on."
        echo -e "If any dependencies are missing then you may not able to download.${NC}"
    fi
}

#Check dependencies
check_dependencies() {
    command -v gmx >/dev/null 2>&1 || { echo -e ${LIGHT_RED} >&2 "GROMACS not found. Please install GROMACS and add it to your PATH.${NC}" 
        sleep 1.0
        echo "Installing GROMACS..."
        sudo apt-get install gromacs; exit 1; }
    command -v obabel >/dev/null 2>&1 || { echo -e ${LIGHT_RED} >&2 "OpenBabel not found. Please install OpenBabel and add it to your PATH.${NC}"
        sleep 1.0
        echo "Installing openbabel..."
        sudo apt-get install openbabel; exit 1; }
    command -v wget >/dev/null 2>&1 || { echo -e ${LIGHT_RED} >&2 "wget not found. Please install wget to download necessary files.${NC}" 
        sleep 1.0
        echo "Installing wget..."
        sudo apt-get install wget; exit 1; }
}

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check Python3 and pip3 installation
if command_exists python3; then
    if command_exists pip3; then
        # Check if networkx is installed and its version
        networkx_version=$(pip3 show networkx 2>/dev/null | grep Version | awk '{print $2}')
        if [ -n "$networkx_version" ]; then
            if [ "$networkx_version" == "2.3" ]; then
                echo
            else
                echo "networkx is installed, but version is $networkx_version. Expected version: 2.3"
                echo "Installing networkx v2.3"
                pip3 install networkx==2.3
            fi
        else
            echo "networkx is not installed."
            echo "Installing networkx v2.3"
            pip3 install networkx==2.3
        fi
    else
        echo "pip3 is not installed"
        echo "Installing pip3"
        sudo apt install python3-pip
    fi
else
    echo "Python3 is not installed"
    echo "Installing Python3"
    sudo apt-get install python3
fi

# Function to prompt user for input
prompt_user() {
    read -p "$1" choice
    echo "$choice"
}

# Function to check if a file exists and prompt to overwrite
check_file_exists() {
    local file=$1
    if [ -f "$file" ]; then
        echo -e ${LIGHT_CYAN}"File '$file' already exists."
        while true; do
            read -p "Do you want to continue and overwrite the file? (y/n): " choice
            echo -e ${NC}
            case $choice in
            [Yy]*)
                echo "Proceeding with overwriting the file."
                return 0
                ;;
            [Nn]*)
                echo "Aborting process."
                return 1
                ;;
            *) echo "Please answer yes or no." ;;
            esac
        done
    fi
    return 0
}

#Retrieve Complex Molecules
retrieve_complex(){
    check_file_exists "$project_dir/protein.pdb" || return
    check_file_exists "$project_dir/ligand.pdbqt" || return
    read -p "Enter the path to your protein file (.pdb): " protein_path
    if [[ ! -f "$protein_path" ]]; then
        echo -e "${LIGHT_RED}Error: $protein_path file does not exist.${NC}"
        return
    else
        cp $protein_path $project_dir/protein.pdb
    fi
    read -p "Enter the path to your protein file (.pdbqt): " ligand_path
    if [[ ! -f "$ligand_path" ]]; then
        echo -e "${LIGHT_RED}Error: $ligand_path file does not exist.${NC}"
        return
    else
        cp $ligand_path $project_dir/ligand.pdbqt
    fi
    if [[ -f "$project_dir/protein.pdb" ]]; then
        if [[ -f "$project_dir/ligand.pdbqt" ]]; then
            echo -e "${LIGHT_GREEN}Molecules retrieved successfully...${NC}"
        fi
    else
        echo -e "${LIGHT_RED}Unable to fetch the molecules, please ensure you enter the correct path...${NC}"
    fi
    echo
}

force_field() {
    echo -e "${LIGHT_BLUE}Select a force field:${NC}"
    PS3="Enter your choice: "
    forcefields=("charmm36" "amber99sb" "charmm27" "gromos54a7" "oplsaa" "Other")
    select ff in "${forcefields[@]}"; do
        case $ff in
        "Other")
            read -p "Enter custom force field: " ff
            break
            ;;
        *)
            break
            ;;
        esac
    done
}

water_model() {
    echo -e "${LIGHT_BLUE}Select a water model:${NC}"
    PS3="Enter your choice: "
    watermodels=("spce" "tip3p" "tip4p" "tip5p" "Other")
    select wm in "${watermodels[@]}"; do
        case $wm in
        "Other")
            read -p "Enter custom water model: " wm
            break
            ;;
        *)
            break
            ;;
        esac
    done
}

# Function to fix PDB file using PDBFixer
pdb_fixer() {
    echo
    pdbfixer --pdbid="$pdb_id" --keep-heterogens=none --add-residues --replace-nonstandard --add-atoms=all --ph=7.0 --output=$project_dir/protein.pdb --verbose >/dev/null 2>&1 &
    pdbfix_loader
}

# Function to remove HETATM lines
remove_hetatm() {
    if grep -q "HETATM" $project_dir/protein.pdb; then
        echo "Removing HETATM entries from protein.pdb..."
        sed -i '/^HETATM/d' $project_dir/protein.pdb
    fi
}

# Function to generate protein topology
prepare_protein_topology(){
    # Check auto_check function
    # if [[ $(auto_check) == true ]]; then
    #     remove_hetatm
    #     gmx pdb2gmx -f "$project_dir/protein.pdb" -o "$project_dir/protein.gro" -ff "$ff" -water "$wm" -ignh >/dev/null 2>&1
    #     local exit_status=$?
    #     if [[ $exit_status -ne 0 ]]; then
    #         echo -e "${LIGHT_RED}Error: Failed to generate protein topology. Attempting to fix PDB file.${NC}"
    #         pdb_fixer || {
    #             echo -e "${LIGHT_RED}Error: PDB fixer failed. Exiting.${NC}"
    #             exit 1
    #         }

    #         # Retry GROMACS pdb2gmx after fixing
    #         gmx pdb2gmx -f "$project_dir/protein.pdb" -o "$project_dir/protein.gro" -ff "$ff" -water "$wm" -ignh >/dev/null 2>&1
    #         exit_status=$?
    #         if [[ $exit_status -ne 0 ]]; then
    #             echo -e "${LIGHT_RED}Error: Topology generation failed after fixing.${NC}"
    #             exit 1
    #         fi
    #     fi
    # else
        # Check if protein file exists
        if [[ ! -f "$project_dir/protein.pdb" ]]; then
            echo -e "${LIGHT_RED}Error: protein.pdb file does not exist.${NC}"
            read -p "Do you want to download the protein structure (y/n): " response
            if [[ "$response" == "y" ]]; then
                download_protein || {
                    echo -e "${LIGHT_RED}Error: Failed to download protein.${NC}"
                    exit 1
                }
            else
                echo -e "${LIGHT_RED}Aborting: No PDB file provided.${NC}"
                exit 1
            fi
        fi

        # Remove HETATM entries
        remove_hetatm
        echo
        force_field
        echo
        water_model

        # Generate protein topology
        echo "Generating Protein Topology..."
        gmx pdb2gmx -f "$project_dir/protein.pdb" -o "$project_dir/protein.gro" -ff "$ff" -water "$wm" -ignh >/dev/null 2>&1
        local exit_status=$?
        if [[ $exit_status -ne 0 ]]; then
            echo -e "${LIGHT_RED}Error: Failed to generate protein topology. Attempting to fix PDB file.${NC}"
            pdb_fixer || {
                echo -e "${LIGHT_RED}Error: PDB fixer failed. Exiting.${NC}"
                exit 1
            }

            # Retry GROMACS pdb2gmx after fixing
            gmx pdb2gmx -f "$project_dir/protein.pdb" -o "$project_dir/protein.gro" -ff "$ff" -water "$wm" -ignh >/dev/null 2>&1
            exit_status=$?
            if [[ $exit_status -ne 0 ]]; then
                echo -e "${LIGHT_RED}Error: Topology generation failed after fixing.${NC}"
                exit 1
            fi
        fi
    # fi

    # Success message
    echo -e "${LIGHT_GREEN}Protein topology generated successfully.${NC}"
    echo
    sleep 1.0
}


prepare_ligand_topology() {
    echo
    echo -e "${YELLOW}------------------------------------"
    echo -e "       Prepare Ligand Topology"
    echo -e "------------------------------------${NC}"
    while true; do
        echo -e "${LIGHT_PURPLE}[${NC}01${LIGHT_PURPLE}]${NC} Prepare .mol2 file"
        echo -e "${LIGHT_PURPLE}[${NC}02${LIGHT_PURPLE}]${NC} Fix .mol2 file"
        echo -e "${LIGHT_PURPLE}[${NC}03${LIGHT_PURPLE}]${NC} Prepare ligand parameter file"
        echo -e "${LIGHT_PURPLE}[${NC}04${LIGHT_PURPLE}]${NC} Generate ligand gro file"
        echo -e "${LIGHT_PURPLE}[${NC}05${LIGHT_PURPLE}]${NC} Generate complex.gro file and edit topol.top"
        echo -e "${LIGHT_PURPLE}[${NC}06${LIGHT_PURPLE}]${NC} Back to Main Menu"
        echo -e "${YELLOW}------------------------------------"
        read -p "Enter your choice [1-6]: " lig_top_choice

        case $lig_top_choice in
            1) 
                lig_pdbqt_file="lig.pdbqt"
                if [ ! -f "$lig_pdbqt_file" ]; then
                    echo "$lig_pdbqt_file does not exist."
                    exit 1
                fi
                if command -v obabel &> /dev/null 
                then
                    check_file_exists "lig.pdb" || return
                    obabel lig.pdbqt -O lig.pdb
                    if [ -f "lig.pdb" ]; then
                        obabel lig.pdb -O lig.mol2 -h
                        prepare_ligand_topology
                    else
                        echo "lig.pdb file does not exits. Please ensure the OpenBabel is properly installed and try again"
                        exit 1
                    fi
                else
                    echo "Open Babel is not installed. Would you like to install?"
                    while true; do
                        echo "Select option"
                        echo "1) YES"
                        echo "2) NO"
                        read -p "Enter your choice [1-2]: " choice

                        case $choice in
                            1)
                                sudo apt-get install obabel
                                ;;
                            2) return ;;
                        esac
                    done
                    return
                fi
                ;;
            2)
                mol_file="lig.mol2"
                perl_sort_file="sort_mol2_bonds.pl"
                if [ ! -f "$mol_file" ]; then
                    if [ ! -f "$perl_sort_file" ]; then
                        echo "$mol_file does not exist."
                        echo "Download the file?"
                        while true; do
                            echo "Select option"
                            echo "1) YES"
                            echo "2) NO"
                            read -p "Enter your choice [1-2]: " choice

                            case $choice in
                                1)
                                    wget http://www.mdtutorials.com/gmx/complex/Files/sort_mol2_bonds.pl
                                    ;;
                                2) return ;;
                            esac
                        done
                    fi
                fi
                
                if [ -f "$perl_sort_file" ]; then
                    check_file_exists "lig_fix.mol2" || return
                    perl sort_mol2_bonds.pl lig.mol2 lig_fix.mol2
                else
                    echo "$perl_sort_file does not exist."
                    exit 1
                fi
                echo
                echo "Before proceeding to the next step, generate lig_fix.str file from CGenFF server"
                echo "Login to the server > upload lig_fix.mol2 file > downlaod results lig_fix.str"
                echo
                read -p "Redirecting to the CGenFF webpage. Are you ready? [Y/n] " redirect_check
                case $redirect_check in
                    [Yy]*)
                        nohup xdg-open "https://app.cgenff.com/homepage" >/dev/null 2>&1 &
                        ;;
                    [Nn]*)
                        echo "Aborting process."
                        return 1
                        ;;
                    *) echo "Please answer yes or no." ;;
                esac
                ;;
            3)
                if [ ! -f "lig_fix.mol2" ]; then
                    echo "lig_fix.mol2 does not exist. Please prepare it first."
                    exit 1
                fi
                check_file_exists "lig_fix.prm" || return
                read -p "Enter the path to your lig_fix.str file (.str): " lig_str_path
                if [[ ! -f "$lig_str_path" ]]; then
                    echo -e "${LIGHT_RED}Error: $lig_str_path file does not exist.${NC}"
                    echo -e "If stream (.str) file is not generated, you can generate it from CGenFF Webserver"
                    echo "Login to the server > upload lig_fix.mol2 file > downlaod results lig_fix.str"
                    echo
                    read -p "Redirecting to the CGenFF webpage. Are you ready? [Y/n] " redirect_check
                    case $redirect_check in
                        [Yy]*)
                            nohup xdg-open "https://app.cgenff.com/homepage" >/dev/null 2>&1 &
                            ;;
                        [Nn]*)
                            echo "Aborting process."
                            return 1
                            ;;
                        *) echo "Please answer yes or no." ;;
                    esac
                else
                    cp $lig_str_path $project_dir/lig_fix.str
                fi
                python3 cgenff_charmm2gmx_py3_nx2.py LIG lig_fix.mol2 lig_fix.str charmm36-jul2022.ff || { echo "Error: Failed to prepare ligand parameter file."; exit 1; }
                ;;
            4)
                if [ ! -f "lig_ini.pdb" ]; then
                    echo "lig_ini.pdb does not exist."
                    exit 1
                fi
                check_file_exists "lig.gro" || return
                gmx editconf -f lig_ini.pdb -o lig.gro || { echo "Error: Failed to prepare ligand topology."; exit 1; }
                ;;
            5)
                echo "Generating complex.gro file..."
                if [ ! -f "protein.gro" ]; then
                    echo "protein.gro does not exist. Please prepare it first."
                    exit 1
                fi
                if [ ! -f "lig.gro" ]; then
                    echo "lig.gro does not exist. Please prepare it first."
                    exit 1
                fi
                python3 merge.py || { echo "Error: Failed to generate complex.gro."; exit 1; }
                echo "complex.gro generated successfully."

                # Integrate program 2 to edit topol.top file
                echo "Editing topol.top file..."
                
                if [ ! -f "topol.top" ]; then
                    echo "topol.top does not exist."
                    exit 1
                fi

                # Add an empty line and 'lig.itp' after two lines following 'posre.itp'
                sed -i '/#include "posre.itp"/{n;a\
\
; Include ligand topology\
#include "lig.itp"
}' topol.top

                # Add ligand parameters inclusion
                sed -i '/; Include forcefield parameters/{n;a\
\
; Include ligand parameters\
#include "lig.prm"
}' topol.top

                # Add ligand entry at the end
                echo "LIG                 1" >> topol.top

                echo "topol.top file updated successfully."
                
                # Return to main menu after successful processing
                return
                ;;
            6)
                return
                ;;
            *)
                echo "Invalid option! Please select between 1 and 4."
                ;;
        esac
    done
}

# Function to define box and solvate the system
define_box_and_solvate() {
    echo "Defining box and solvating system..."
    if [ ! -f "complex.gro" ]; then
        echo "complex.gro does not exist."
        exit 1
    fi
    check_file_exists "newbox.gro" || return
    gmx editconf -f complex.gro -o newbox.gro -bt dodecahedron -d 1.0 || { echo "Error: Failed to define the box."; exit 1; }
    check_file_exists "solv.gro" || return
    gmx solvate -cp newbox.gro -cs spc216.gro -p topol.top -o solv.gro || { echo "Error: Failed to solvate the system."; exit 1; }
}

# Function to add ions
add_ions() {
    echo "Adding ions..."
    if [ ! -f "solv.gro" ]; then
        echo "solv.gro does not exist."
        exit 1
    fi
    
    if [ ! -f "ions.mdp" ]; then
        echo "ions.mdp does not exist. Downloading..."
        wget -nc http://www.mdtutorials.com/gmx/complex/Files/ions.mdp
    fi
    
    check_file_exists "ions.tpr" || return
    gmx grompp -f ions.mdp -c solv.gro -p topol.top -o ions.tpr || { echo "Error: Failed to prepare ions."; exit 1; }
    check_file_exists "solv_ions.gro" || return
    gmx genion -s ions.tpr -o solv_ions.gro -p topol.top -pname NA -nname CL -neutral || { echo "Error: Failed to add ions."; exit 1; }
}

# Function to run energy minimization
energy_minimization() {
    echo "Running energy minimization..."
    if [ ! -f "solv_ions.gro" ]; then
        echo "solv_ions.gro does not exist."
        exit 1
    fi
    
    if [ ! -f "em.mdp" ]; then
        echo "em.mdp does not exist. Downloading..."
        wget -nc http://www.mdtutorials.com/gmx/complex/Files/em.mdp
    fi
    
    check_file_exists "em.tpr" || return
    gmx grompp -f $project_dir/em.mdp -c $project_dir/solv_ions.gro -p $project_dir/topol.top -o $project_dir/em.tpr >/dev/null 2>&1 &
    show_spinner $! "Preparing"
    # || { echo "Error: Failed to prepare for energy minimization."; exit 1; }
    check_file_exists "em.gro" || return
    gmx mdrun -v -deffnm $project_dir/em >/dev/null 2>&1 &
    energy_minimization_loader
    echo
    # || { echo "Error: Energy minimization failed."; exit 1; }
}

# Function to run equilibrium
equilibrium() {
    echo "Running equilibrium..."
    while true; do
        echo "---------------------------"
        echo "   Equilibrium Menu"
        echo "---------------------------"
        echo "1) Ligand Restraining"
        echo "2) Thermostats"
        echo "3) NVT Equilibration"
        echo "4) NPT Equilibration"
        echo "5) Back to Main Menu"
        read -p "Enter your choice [1-5]: " equil_choice

        case $equil_choice in
            1)
                echo "Ligand restraining..."
                if [ ! -f "lig.gro" ]; then
                    echo "lig.gro does not exist."
                    exit 1
                fi
                check_file_exists "index_lig.ndx" || return
                gmx make_ndx -f "lig.gro" -o "index_lig.ndx" || { echo "Error: Failed to create index file."; exit 1; }
                check_file_exists "posre_lig.itp" || return
                gmx genrestr -f "lig.gro" -n "index_lig.ndx" -o "posre_lig.itp" -fc 1000 1000 1000 || { echo "Error: Failed to generate position restraints."; exit 1; }
                echo "Ligand restraining completed."
                
                # Integrate program 2 to edit topol.top file
                echo "Editing topol.top file..."
                
                if [ ! -f "topol.top" ]; then
                    echo "topol.top does not exist."
                    exit 1
                fi

                # Add an empty line and 'lig.itp' after two lines following 'posre.itp'
                sed -i '/#include "lig.itp"/{n;a\
; Ligand position restraints\
#ifdef POSRES_LIG\
#include "posre_lig.itp"\
#endif
}' topol.top

                echo "topol.top file updated successfully."
                ;;

            2)
                echo "Setting up thermostats..."
                if [ ! -f "em.gro" ]; then
                    echo "em.gro does not exist."
                    exit 1
                fi
                check_file_exists "index.ndx" || return
                gmx make_ndx -f em.gro -o index.ndx || { echo "Error: Failed to create index file for thermostats."; exit 1; }
                echo "Thermostats setup completed."
                ;;
            3)
                echo "Running NVT equilibration..."
                if [ ! -f "em.gro" ]; then
                    echo "em.gro does not exist."
                    exit 1
                fi
                
                if [ ! -f "nvt.mdp" ]; then
                    echo "nvt.mdp does not exist. Downloading..."
                    wget -nc http://www.mdtutorials.com/gmx/complex/Files/nvt.mdp
                fi
                
                check_file_exists "nvt.tpr" || return
                gmx grompp -f nvt.mdp -c em.gro -r em.gro -p topol.top -n index.ndx -o nvt.tpr || { echo "Error: Failed to prepare NVT equilibration."; exit 1; }
                check_file_exists "nvt.gro" || return
                gmx mdrun -deffnm nvt -v || { echo "Error: NVT equilibration failed."; exit 1; }
                ;;
            4)
                echo "Running NPT equilibration..."
                if [ ! -f "nvt.gro" ]; then
                    echo "nvt.gro does not exist."
                    exit 1
                fi
                
                if [ ! -f "npt.mdp" ]; then
                    echo "npt.mdp does not exist. Downloading..."
                    wget -nc http://www.mdtutorials.com/gmx/complex/Files/npt.mdp
                fi
                
                check_file_exists "npt.tpr" || return
                gmx grompp -f npt.mdp -c nvt.gro -r nvt.gro -p topol.top -n index.ndx -o npt.tpr || { echo "Error: Failed to prepare NPT equilibration."; exit 1; }
                check_file_exists "npt.gro" || return
                gmx mdrun -deffnm npt -v || { echo "Error: NPT equilibration failed."; exit 1; }
                ;;
            5)
                echo "Returning to main menu..."
                return
                ;;
            *)
                echo "Invalid option! Please select between 1 and 5."
                ;;
        esac
    done
}

# Update nsteps in md.mdp and regenerate md.tpr
update_simulation_steps() {
    # Update nsteps in md.mdp
    sed -i "s/^nsteps.*/nsteps = $md_nsteps/" $project_dir/md.mdp

    # Clear old .tpr file (optional but recommended)
    rm -f $project_dir/md.tpr

    # Regenerate md.tpr using the updated md.mdp
    gmx grompp -f $project_dir/md.mdp -c $project_dir/npt.gro -p $project_dir/topol.top -n $project_dir/index.ndx -o $project_dir/md.tp >/dev/null 2>&1 || {
        echo -e ${LIGHT_RED} "Error: Failed to prepare production MD.${NC}"
        exit 1
    }
}

# Function to run production MD
production_md() {
    echo
    # Check for required files
    if [ ! -f "$project_dir/npt.gro" ]; then
        echo -e ${LIGHT_RED} "npt.gro does not exist.${NC}"
        sleep 2.0
        exit 1
    fi

    if [ ! -f "$project_dir/md.mdp" ]; then
        echo "md.mdp does not exist. Downloading..."
        file_download_name="md.mdp"
        (wget -nc "http://www.mdtutorials.com/gmx/lysozyme/Files/md.mdp") &
        download_loader
    fi

    check_file_exists "$project_dir/md.xtc" || return

    #User input simulation time
    echo -e ${YELLOW}"Do you want to continue with default simulation time (10ns)?"
    echo -e "${LIGHT_PURPLE}[${NC}01${LIGHT_PURPLE}]${NC} Yes, continue"
    echo -e "${LIGHT_PURPLE}[${NC}02${LIGHT_PURPLE}]${NC} No, enter custom value"
    echo
    read -p "Enter your choice [1-2]: " simulation_time
    echo -e ${NC}

    case $simulation_time in
        1) md_nsteps=5000000 ;;
        2)
            read -p "Set simulation time (ns): " md_time_ns
            md_time_ps=$(echo "$md_time_ns * 1000" | bc)
            md_nsteps=$(echo "$md_time_ps / 0.002" | bc)
            ;;
        *)
            echo -e "${LIGHT_RED}Invalid option! Please select between 1 and 3.${NC}"
            sleep 2.0
            return
            ;;
        esac

    # Update nsteps and generate new md.tpr file
    update_simulation_steps

    echo -e ${LIGHT_GREEN}"Preparation DONE!${NC}"

    # Check for any GPU using lspci
    gpu_info=$(lspci | grep -i vga)

    if [[ -n "$gpu_info" ]]; then
        echo "GPU detected:"
        echo "$gpu_info"

        # Check if the GPU is an NVIDIA card and if nvidia-smi is available
        if command -v nvidia-smi &>/dev/null; then
            echo -e ${LIGHT_CYAN} "NVIDIA GPU detected. Running nvidia-smi for details:${NC}"
            nvidia-smi
            sleep 3.0

            # Measure and show time while running the simulation, suppress output
            start_time=$(date +%s) # Get start time
            gmx mdrun -deffnm $project_dir/md -v -nb gpu >/dev/null 2>&1 &
            show_spinner $! "Running MD Simulation"
            end_time=$(date +%s) # Get end time

            elapsed=$((end_time - start_time)) # Calculate elapsed time in seconds
            echo "Elapsed time: $elapsed seconds"
            show_spinner $! "Running MD Simulation on GPU"

        else
            echo -e ${LIGHT_CYAN} "NVIDIA GPU not detected or nvidia-smi command not found. Running simulation on CPU...${NC}"
            sleep 3.0

            # Measure and show time while running the simulation, suppress output
            start_time=$(date +%s) # Get start time
            gmx mdrun -deffnm $project_dir/md -v >/dev/null 2>&1 &
            show_spinner $! "Running MD Simulation"
            end_time=$(date +%s) # Get end time

            elapsed=$((end_time - start_time)) # Calculate elapsed time in seconds
            echo "Elapsed time: $elapsed seconds"
            show_spinner $! "Running MD Simulation on CPU"
        fi
    else
        echo -e ${LIGHT_CYAN}"No GPU detected. Running simulation on CPU..."${NC}
        sleep 3.0

        # Measure and show time while running the simulation, suppress output
        start_time=$(date +%s) # Get start time
        gmx mdrun -deffnm $project_dir/md -v >/dev/null 2>&1 &
        show_spinner $! "Running MD Simulation"
        end_time=$(date +%s) # Get end time

        elapsed=$((end_time - start_time)) # Calculate elapsed time in seconds
        echo "Elapsed time: $elapsed seconds"
        sleep 2.0
    fi
echo
echo -e "Processing files..."
echo

#Recentering and Rewrapping Coordinates...
if [ ! -f "$project_dir/md.xtc" ]; then
    echo -e ${LIGHT_RED} "md.xtc does not exist.${NC}"
    exit 1
fi
check_file_exists "$project_dir/md_center.xtc" || return
printf "1 0\n" | gmx trjconv -s $project_dir/md.tpr -f $project_dir/md.xtc -o $project_dir/md_center.xtc -pbc mol -center -ur compact >/dev/null 2>&1 || exit 1 
printf "1 0\n" | gmx trjconv -s $project_dir/md.tpr -f $project_dir/md_center.xtc -o $project_dir/md_fit.xtc -fit rot+trans >/dev/null 2>&1 || exit 1 

#Finding RMSD...
if [ ! -f "$project_dir/md_noPBC.xtc" ]; then
    echo -e ${LIGHT_RED} "md_noPBC.xtc does not exist.${NC}"
    exit 1
fi
check_file_exists "$project_dir/rmsd.xvg" || return
printf "4 4\n" | gmx rms -s $project_dir/md.tpr -f $project_dir/md_noPBC.xtc -o $project_dir/rmsd.xvg -tu ns >/dev/null 2>&1 || exit 1

#Finding Radius of Gyration...
if [ ! -f "$project_dir/md_noPBC.xtc" ]; then
    echo -e ${LIGHT_RED} "md_noPBC.xtc does not exist.${NC}"
    exit 1
fi
check_file_exists "$project_dir/gyrate.xvg" || return
printf "1\n" | gmx gyrate -s $project_dir/md.tpr -f $project_dir/md_noPBC.xtc -o $project_dir/gyrate.xvg >/dev/null 2>&1 || exit 1

#Analyzing Hbonds...
if [ ! -f "$project_dir/md_noPBC.xtc" ]; then
    echo -e ${LIGHT_RED} "md_noPBC.xtc does not exist.${NC}"
    exit 1
fi
check_file_exists "$project_dir/hbnum.xvg" || return
check_file_exists "$project_dir/hbdist.xvg" || return
printf "1 11\n" |  gmx hbond -f $project_dir/md_noPBC.xtc -s $project_dir/md.tpr -num -dist > /dev/null 2>&1 || exit 1

#Analyzing RMSF...
if [ ! -f "$project_dir/md_noPBC.xtc" ]; then
    echo -e ${LIGHT_RED} "md_noPBC.xtc does not exist.${NC}"
    exit 1
fi
check_file_exists "$project_dir/rmsf.xvg" || return
printf "1\n" | gmx rmsf -f $project_dir/md_noPBC.xtc -s $project_dir/md.tpr -o $project_dir/rmsf.xvg >/dev/null 2>&1 || exit 1

#Analyzing Temp...
if [ ! -f "$project_dir/nvt.edr" ]; then
    echo -e ${LIGHT_RED} "nvt.edr does not exist.${NC}"
    exit 1
fi
check_file_exists "$project_dir/temp.xvg" || return
printf "17\n" | gmx energy -f $project_dir/nvt.edr -o $project_dir/temp.xvg >/dev/null 2>&1 || exit 1

#Analyzing Pressure...
if [ ! -f "$project_dir/npt.edr" ]; then
    echo -e ${LIGHT_RED} "npt.edr does not exist.${NC}"
    exit 1
fi
check_file_exists "$project_dir/pressure.xvg" || return
printf "19\n" | gmx energy -f $project_dir/npt.edr -o $project_dir/pressure.xvg >/dev/null 2>&1 || exit 1

wait
}

# Function to run analysis
run_analysis() {
    echo
    while true; do
        echo -e "${YELLOW}---------------------------"
        echo -e "       Analysis Menu"
        echo -e "---------------------------${NC}"
        echo "1) RMSD"
        echo "2) RMSF"
        echo "3) Radius of Gyration"
        echo "4) H-Bond"
        echo "5) Energies"
        echo "6) Back to Main Menu"
        echo -e "${YELLOW}---------------------------${NC}"
        echo
        read -p "Enter your choice [1-7]: " analysis_choice

        case $analysis_choice in
        1)
            echo
            echo "Analyzing RMSD values..."
            echo
            if [ ! -f "$project_dir/rmsd.xvg" ]; then
                echo -e ${LIGHT_RED} "rmsd.xvg does not exist.${NC}"
                exit 1
            fi
            xmgrace $project_dir/rmsd.xvg
            ;;
        2)
            echo
            echo "Analyzing RMSF..."
            echo
            if [ ! -f "$project_dir/rmsf.xvg" ]; then
                echo -e ${LIGHT_RED} "rmsf.xvg does not exist.${NC}"
                exit 1
            fi
            xmgrace $project_dir/rmsf.xvg
            ;;
        3)
            echo
            echo "Analyzing Radius of Gyration..."
            echo
            if [ ! -f "$project_dir/gyrate.xvg" ]; then
                echo -e ${LIGHT_RED} "gyrate.xvg does not exist.${NC}"
                exit 1
            fi
            xmgrace $project_dir/gyrate.xvg
            ;;
        4)
            echo
            echo "Analyzing H bonds..."
            echo
            echo "1) No. of H bonds"
            echo "2) Average distance between H bonds"
            echo "3) Back to menu"
            echo
            read -p "Enter your choice [1-3]: " hbond_choice

            case $hbond_choice in
            1)
                echo
                echo "Analyzing No. of H bonds..."
                echo
                if [ ! -f "$project_dir/hbnum.xvg" ]; then
                    echo -e ${LIGHT_RED} "hbnum.xvg does not exist.${NC}"
                    exit 1
                fi
                xmgrace $project_dir/hbnum.xvg
                ;;
            2)
                echo
                echo "Analyzing Average distance between H bonds..."
                echo
                if [ ! -f "$project_dir/hbdist.xvg" ]; then
                    echo -e ${LIGHT_RED} "hbdist.xvg does not exist.${NC}"
                    exit 1
                fi
                xmgrace $project_dir/hbdist.xvg
                ;;
            3)
                echo
                echo "Returning to Main Menu..."
                return
                ;;
            *)
                echo "${LIGHT_RED}Invalid option! Please select between 1 and 3.${NC}"
                sleep 1.0
                ;;
            esac
            ;;
        5)
            echo
            echo "Analyzing Energies..."
            echo
            echo "1) Temperature"
            echo "2) Pressure"
            echo "3) Back to menu"
            echo
            read -p "Enter your choice [1-3]: " energy_choice

            case $energy_choice in
            1)
                echo
                echo "Temperature..."
                echo
                if [ ! -f "$project_dir/temp.xvg" ]; then
                    echo -e ${LIGHT_RED} "temp.xvg does not exist.${NC}"
                    exit 1
                fi
                xmgrace $project_dir/temp.xvg
                ;;
            2)
                echo
                echo "Pressure..."
                echo
                if [ ! -f "$project_dir/pressure.xvg" ]; then
                    echo -e ${LIGHT_RED} "pressure.xvg does not exist.${NC}"
                    exit 1
                fi
                xmgrace $project_dir/pressure.xvg
                ;;
            3)
                echo
                echo "Returning to Main Menu..."
                return
                ;;
            *)
                echo "${LIGHT_RED}Invalid option! Please select between 1 and 3.${NC}"
                sleep 1.0
                ;;
            esac
            ;;
        6)
            echo
            echo "Returning to Main Menu..."
            return
            ;;
        *)
            echo "${LIGHT_RED}Invalid option! Please select between 1 and 7.${NC}"
            sleep 1.0
            ;;
        esac
    done
}

banner() {
    # Main script loop
    clear
    echo
    # Print the colored ASCII art
    echo -e "${LIGHT_RED}  __________________    _________   ____.______________      ${RESET}"
    echo -e "${LIGHT_RED} /  _____/\\______   \\  /  _  \\   \\ /   /|   \\__    ___/${RESET}__.__. "
    echo -e "${LIGHT_RED}/   \\  ___ |       _/ /  /_\\  \\   Y   / |   | |    | ${RESET}<   |  | "
    echo -e "${LIGHT_RED}\\    \\_\\  \\|    |   \\/    |    \\     /  |   | |    |  ${RESET}\\___  | "
    echo -e "${LIGHT_RED} \\______  /|____|_  /\\____|__  /\\___/   |___| |____|  ${RESET}/ ____| "
    echo -e "${LIGHT_RED}        \\/        \\/         \\/                       ${RESET}\\/      "
    echo
    echo -e "${WHITE}  [${LIGHT_RED}G${NC}ROMACS ${LIGHT_RED}R${NC}apid ${LIGHT_RED}A${NC}nalysis & ${LIGHT_RED}V${NC}isualization ${LIGHT_RED}I${NC}nterface ${LIGHT_RED}T${NC}ool -y]${NC}"
    echo
}

banner
check_internet
echo
check_dependencies
echo -e "${LIGHT_CYAN}Simulation type: Protein-Ligand Complex${NC}"
echo
# Main script loop
echo "Welcome to the GROMACS simulation"
echo 
echo "Please keep your docked protein and ligand complex ready in the working directory."
echo "Please process your protein.pdbqt by removing water molecules or any HETATM's available"
echo "and convert it into protein.pdb format"
echo 

while true; do
    echo
    echo -e "${YELLOW}------------------------------------"
    echo -e "             Main Menu"
    echo -e "------------------------------------${NC}"
    echo -e "${LIGHT_PURPLE}[${NC}01${LIGHT_PURPLE}]${NC} Retrieve Complex Molecules"
    echo -e "${LIGHT_PURPLE}[${NC}02${LIGHT_PURPLE}]${NC} Prepare Protein Topology"
    echo -e "${LIGHT_PURPLE}[${NC}03${LIGHT_PURPLE}]${NC} Prepare Ligand Topology"
    echo -e "${LIGHT_PURPLE}[${NC}04${LIGHT_PURPLE}]${NC} Define box and solvate the system"
    echo -e "${LIGHT_PURPLE}[${NC}05${LIGHT_PURPLE}]${NC} Add ions"
    echo -e "${LIGHT_PURPLE}[${NC}06${LIGHT_PURPLE}]${NC} Energy minimization"
    echo -e "${LIGHT_PURPLE}[${NC}07${LIGHT_PURPLE}]${NC} Equilibrium"
    echo -e "${LIGHT_PURPLE}[${NC}08${LIGHT_PURPLE}]${NC} Production MD"
    echo -e "${LIGHT_PURPLE}[${NC}09${LIGHT_PURPLE}]${NC} Analysis"
    echo -e "${LIGHT_PURPLE}[${NC}10${LIGHT_PURPLE}]${NC} ${LIGHT_RED}Exit${NC}"
    echo -e "${YELLOW}------------------------------------${NC}"

    choice=$(prompt_user "Enter your choice [1-9]: ")

    case $choice in
        1) retrieve_complex;;
        2) prepare_protein_topology ;;
        3) prepare_ligand_topology ;;
        4) define_box_and_solvate ;;
        5) add_ions ;;
        6) energy_minimization ;;
        7) equilibrium ;;
        8) production_md ;;
        9) run_analysis ;;
        10)
            echo -e "${LIGHT_YELLOW}Thanks for using GRAVITy!${NC}"
            echo "Exiting..."
            echo
            exit 0
            ;;
        *)
            echo -e "${LIGHT_RED}Invalid option! Please select between 1 and 11.${NC}"
            sleep 1.0
            ;;
    esac
done


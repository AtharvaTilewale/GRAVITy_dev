#Author: Atharva Tilewale
#Protein simulation made easy with GRAVITy

# Source the color script
source ./colors

# Function to stop the spinner if an error occurs
stop_spinner() {
    if [ ! -z "$spinner_pid" ]; then
        kill $spinner_pid
    fi
}

# Function to display a rotating loader with custom text
show_spinner() {
    local pid=$1         # Process ID to monitor
    local message=$2     # Custom loading message
    local spin='-\|/'    # Spinner characters
    local i=0

    # Loop to display the spinner until the task completes
    while kill -0 $pid 2>/dev/null; do
        i=$(( (i + 1) % 4 ))
        printf "\r${spin:$i:1} %s..." "$message"
        sleep 0.1
    done
    printf "\r%s...        \n" "$message"
}

#check internet connection
check_internet() {
    if ping -c 1 -W 1 8.8.8.8 &> /dev/null; then
        echo -e "Status [${LIGHT_GREEN}Online${NC}]"
    else
        echo -e "Status [${LIGHT_RED}Offline${NC}]"
        echo -e "${LIGHT_RED}It is recommended to connect to the internet while process is going on."
        echo -e "If any dependencies are missing then you may not able to download.${NC}"
    fi
}

#Check dependencies
check_dependencies() {
    command -v gmx >/dev/null 2>&1 || { echo -e ${LIGHT_RED} >&2 "GROMACS not found. It is necessary to install GROMACS.${NC}" 
        sleep 1.0
        echo "Installing GROMACS..."
        sudo apt-get install gromacs; exit 1; }
    command -v wget >/dev/null 2>&1 || { echo -e ${LIGHT_RED} >&2 "wget not found. It is necessary to install wget.${NC}" 
        sleep 1.0
        echo "Installing wget..."
        sudo apt-get install wget; exit 1; }
}

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check Python3 and pip3 installation
if command_exists python3; then
    if command_exists pip3; then
        # Check if networkx is installed and its version
        networkx_version=$(pip3 show networkx 2>/dev/null | grep Version | awk '{print $2}')
        if [ -n "$networkx_version" ]; then
            if [ "$networkx_version" != "2.3" ]; then
                echo "This tool requires networkx v2.3. You are using version $networkx_version"
                echo "Do you want to continue installing networkx v2.3? (y/n)"
                read install_choice
                if [ "$install_choice" == "y" ]; then
                    pip3 install networkx==2.3
                fi
            fi
        else
            echo -e ${LIGHT_RED} "networkx is not installed. ${NC}"
            echo "Installing networkx v2.3"
            pip3 install networkx==2.3
        fi
    else
        echo -e ${LIGHT_RED} "pip3 is not installed ${NC}"
        echo "Installing pip3"
        sudo apt install python3-pip
    fi
else
    echo -e ${LIGHT_RED} "Python3 is not installed ${NC}" 
    echo "Installing Python3"
    sudo apt-get install python3
fi

# Function to prompt user for input
prompt_user() {
    read -p "$1" choice
    echo "$choice"
}

# Function to check if a file exists and prompt to overwrite
check_file_exists() {
    local file=$1
    if [ -f "$file" ]; then
        echo -e ${LIGHT_CYAN}"File '$file' already exists."
        while true; do
            read -p "Do you want to continue and overwrite the file? (y/n): " choice
            echo -e ${NC}
            case $choice in
                [Yy]* ) echo "Proceeding with overwriting the file."; return 0 ;;
                [Nn]* ) echo "Aborting process."; return 1 ;;
                * ) echo "Please answer yes or no." ;;
            esac
        done
    fi
    return 0
}

# Download protein structure
# Download protein structure
download_protein() {
    echo -e "${YELLOW}Download protein structure using PDB ID${NC}"
    read -p "Enter PDB ID: " pdb_id

    # Attempt download and show spinner
    ( wget "https://files.rcsb.org/download/${pdb_id}.pdb" -O protein.pdb 2>/dev/null ) & show_spinner $! "Downloading protein structure"
    
    # Check if the file was downloaded successfully
    if [ -s protein.pdb ]; then
        echo -e "${LIGHT_GREEN}Protein Structure Downloaded successfully!${NC}"
    else
        echo -e "${LIGHT_RED}Error: Failed to download PDB structure.${NC}"
        rm -f protein.pdb  # Clean up any incomplete file
        exit 1
    fi

    sleep 3.0
}

# Function to generate protein topology
generate_protein_topology() {
    echo
    echo "Generating protein topology..."
    if [ ! -f "protein.pdb" ]; then
        echo -e ${LIGHT_RED} "protein.pdb file does not exist. ${NC}"
        read -p "Do you want download the protein structure (y/n): " protein_download
            if [ "$protein_download" == "y" ]; then
                download_protein
            else
                echo -e "${LIGHT_RED}Aborting: No PDB file provided.${NC}"
            exit 1
            fi
        if grep -q "HETATM" protein.pdb; then
            # Remove lines containing HETATM and save back to the same file
            sed -i '/^HETATM/d' protein.pdb
        fi
        gmx pdb2gmx -f protein.pdb -o protein.gro -ignh || { echo -e ${LIGHT_RED} "Error: Failed to prepare protein topology." ${NC}
        sleep 2.0; exit 1; }
    else
        check_file_exists "protein.gro" || return
        if grep -q "HETATM" protein.pdb; then
            # Remove lines containing HETATM and save back to the same file
            sed -i '/^HETATM/d' protein.pdb
        fi
        gmx pdb2gmx -f protein.pdb -o protein.gro -ignh || { echo -e ${LIGHT_RED} "Error: Failed to prepare protein topology." ${NC}
        sleep 2.0; exit 1; }
    fi
}

box_loader(){
show_spinner $! "Preparing Box"
    wait $!
    if [ $? -ne 0 ]; then
        echo -e "${LIGHT_RED}Error: Failed to define the box.${NC}"
        exit 1
    else
    echo -e ${LIGHT_GREEN}"Box prepared successfully!"${NC}
    sleep 1.0
    fi 
}

solvate_loader(){
show_spinner $! "Solvating the system"
    wait $!
    if [ $? -ne 0 ]; then
        echo -e "${LIGHT_RED}Error: Failed to solvate the system.${NC}"
        exit 1
    else
    echo -e ${LIGHT_GREEN}"System solvated successfully!"${NC}
    sleep 1.0
    fi 
}

# Function to define box and solvate the system
define_box_and_solvate() {
    echo
    echo "Defining box and solvating system..."
    echo
        if [ ! -f "protein.gro" ]; then
        echo -e ${LIGHT_RED} "protein.gro does not exist.${NC}"
        sleep 2.0 
        exit 1
    fi
    check_file_exists "solv.gro" || return
    echo -e ${YELLOW}
    read -p "Do you want to continue with the default box type and solvation model (Cubic/SPC)? (y/n): " select_solvate_box
    echo -e ${NC}
    if [ $select_solvate_box == "y" ]; then
        gmx editconf -f protein.gro -o newbox.gro -c -d 1.0 -bt cubic > /dev/null 2>&1 & box_loader
        echo
        gmx solvate -cp newbox.gro -cs spc216.gro -p topol.top -o solv.gro > /dev/null 2>&1 & solvate_loader
    else
        echo -e ${YELLOW}"Select box type from the following${NC}"
        echo -e "${LIGHT_PURPLE}[${NC}01${LIGHT_PURPLE}]${NC} Cubic"
        #echo -e "${LIGHT_PURPLE}[${NC}02${LIGHT_PURPLE}]${NC} Octahedral"
        echo -e "${LIGHT_PURPLE}[${NC}02${LIGHT_PURPLE}]${NC} Dodecahedron"
        echo -e "${LIGHT_PURPLE}[${NC}03${LIGHT_PURPLE}]${NC} Triclinic"
        choice=$(prompt_user "Enter your choice [1-3]: ")
        echo -e ${NC}

        case $choice in
            1) gmx editconf -f protein.gro -o newbox.gro -c -d 1.0 -bt cubic > /dev/null 2>&1 & box_loader;;
            #2) gmx editconf -f protein.gro -o newbox.gro -c -d 1.0 -bt octahedral || { echo -e ${LIGHT_RED} "Error: Failed to define the box.${NC}"
            #sleep 2.0; exit 1; } ;;
            2) gmx editconf -f protein.gro -o newbox.gro -c -d 1.0 -bt dodecahedron > /dev/null 2>&1 & box_loader ;;
            3) gmx editconf -f protein.gro -o newbox.gro -c -d 1.0 -bt triclinic > /dev/null 2>&1 & box_loader ;;
            *) echo -e "${LIGHT_RED}Invalid option! Please select between 1 and 3.${NC}"
            sleep 1.0
            ;;
        esac
        echo
        echo -e ${YELLOW}"Select solvation model from the following${NC}"
        echo -e "${LIGHT_PURPLE}[${NC}01${LIGHT_PURPLE}]${NC} SPC"
        #echo -e "${LIGHT_PURPLE}[${NC}02${LIGHT_PURPLE}]${NC} SPC/E"
        echo -e "${LIGHT_PURPLE}[${NC}02${LIGHT_PURPLE}]${NC} TIP3P"
        echo -e "${LIGHT_PURPLE}[${NC}03${LIGHT_PURPLE}]${NC} TIP4P"
        choice=$(prompt_user "Enter your choice [1-3]: ")
        echo -e ${NC}

        case $choice in
            1) gmx solvate -cp newbox.gro -cs spc216.gro -p topol.top -o solv.gro > /dev/null 2>&1 & solvate_loader ;;
            #2) gmx solvate -cp newbox.gro -cs spce216.gro -p topol.top -o solv.gro || { echo -e ${LIGHT_RED} "Error: Failed to solvate the system.${NC}"
            #sleep 2.0; exit 1; } ;;
            2) gmx solvate -cp newbox.gro -cs tip3p.gro -p topol.top -o solv.gro > /dev/null 2>&1 &
            solvate_loader ;;
            3) gmx solvate -cp newbox.gro -cs tip4p.gro -p topol.top -o solv.gro > /dev/null 2>&1 & solvate_loader ;;
            *) echo -e "${LIGHT_RED}Invalid option! Please select between 1 and 3.${NC}"
            sleep 1.0
            ;;
        esac
    fi
}

# Function to add ions
add_ions() {
    echo
    echo "Adding ions..."
    if [ ! -f "solv.gro" ]; then
        echo -e ${LIGHT_RED} "solv.gro does not exist."${NC}
        sleep 2.0
        exit 1
    fi
    
    if [ ! -f "ions.mdp" ]; then
        echo "ions.mdp does not exist. Downloading..."
        wget -nc "http://www.mdtutorials.com/gmx/lysozyme/Files/ions.mdp"
    fi
    check_file_exists "solv_ions.gro" || return
    gmx grompp -f ions.mdp -c solv.gro -p topol.top -o ions.tpr || { echo -e ${LIGHT_RED} "Error: Failed to prepare ions.${NC}"
    sleep 2.0; exit 1; }
    echo -e ${LIGHT_YELLOW}
    read -p "Do you want to continue with the default ions (Both Na+ and Cl-)? (y/n): " select_ion_addition
    echo -e ${NC}
    if [ $select_ion_addition == "y" ]; then
        gmx genion -s ions.tpr -o solv_ions.gro -p topol.top -pname NA -nname CL -neutral || { echo -e ${LIGHT_RED} "Error: Failed to add ions.${NC}"
        sleep 2.0; exit 1; }
    else
    echo -e ${YELLOW}"Select box type from the following${NC}"
        echo -e "${LIGHT_PURPLE}[${NC}01${LIGHT_PURPLE}]${NC} Add Na+ and Cl- ions to neutralize the system"
        echo -e "${LIGHT_PURPLE}[${NC}02${LIGHT_PURPLE}]${NC} Add only Na+ ions"
        echo -e "${LIGHT_PURPLE}[${NC}03${LIGHT_PURPLE}]${NC} Add only Cl- ions"
        choice=$(prompt_user "Enter your choice [1-3]: ")
        echo -e ${NC}

        case $choice in
            1) gmx genion -s ions.tpr -o solv_ions.gro -p topol.top -pname NA -nname CL -neutral || { echo -e ${LIGHT_RED} "Error: Failed to add ions.${NC}"
            sleep 2.0; exit 1; } ;;
            2) gmx genion -s ions.tpr -o solv_ions.gro -p topol.top -pname NA || { echo -e ${LIGHT_RED} "Error: Failed to add ions.${NC}"
            sleep 2.0; exit 1; } ;;
            3) gmx genion -s ions.tpr -o solv_ions.gro -p topol.top -nname CL || { echo -e ${LIGHT_RED} "Error: Failed to add ions.${NC}"
            sleep 2.0; exit 1; } ;;
            *) echo -e "${LIGHT_RED}Invalid option! Please select between 1 and 3.${NC}"
            sleep 1.0
            ;;
        esac
    fi
}

# Function to run energy minimization
energy_minimization() {
    # energy_minimization() {
    # echo -e "${YELLOW}Perform Energy Minimization${NC}"
    # echo -e "Choose an energy minimization method:"
    # echo -e "1. Steepest Descent"
    # echo -e "2. Conjugate Gradient"
    # echo -e "3. Skip energy minimization"

    # read -p "Enter your choice (1-3): " choice

    # case $choice in
    echo
    echo "Running energy minimization..."
    printf "\n"
    if [ ! -f "solv_ions.gro" ]; then
        echo -e ${LIGHT_RED} "solv_ions.gro does not exist." ${NC}
        sleep 2.0
        exit 1
    fi
    
    if [ ! -f "minim.mdp" ]; then
        echo "minim.mdp does not exist. Downloading..."
        wget -nc "http://www.mdtutorials.com/gmx/lysozyme/Files/minim.mdp"
    fi
    check_file_exists "em.gro" || return
    gmx grompp -f minim.mdp -c solv_ions.gro -p topol.top -o em.tpr || { echo -e ${LIGHT_RED} "Error: Failed to prepare for energy minimization.${NC}"
    sleep 2.0; exit 1; }
    gmx mdrun -v -deffnm em || { echo -e ${LIGHT_RED} "Error: Energy minimization failed.${NC}"
    sleep 2.0; exit 1; }
    #generating potential energy xvg file
    gmx energy -f em.edr -o potential.xvg || { echo -e ${LIGHT_RED} "Error: Failed to generate potential energy file.${NC}" 
    sleep 2.0; exit 1; } 
}

NVT_equilibration(){
    gmx grompp -f nvt.mdp -c em.gro -r em.gro -p topol.top -o nvt.tpr || { echo -e ${LIGHT_RED} "Error: Failed to prepare NVT equilibration. ${NC}"
    sleep 2.0; exit 1;}
    gmx mdrun -deffnm nvt -v || { echo -e ${LIGHT_RED} "Error: NVT equilibration failed.${NC}"
    sleep 2.0; exit 1; }
    #Analyzing the temperature progression
    echo "Analyzing the temperature progression..."
    gmx energy -f nvt.edr -o temperature.xvg #generate temperature.xvg file
}

NPT_equilibration() {
    gmx grompp -f npt.mdp -c nvt.gro -r nvt.gro -t nvt.cpt -p topol.top -o npt.tpr || { echo -e ${LIGHT_RED} "Error: Failed to prepare NPT equilibration. ${NC}"
    sleep 2.0; exit 1;}
    gmx mdrun -deffnm npt -v || { echo -e ${LIGHT_RED} "Error: NPT equilibration failed. ${NC}"
    sleep 2.0; exit 1;}
    #Analyzing the pressure and density progression
    echo "Analyzing the pressure and density progression..."
    gmx energy -f npt.edr -o pressure.xvg
    gmx energy -f npt.edr -o density.xvg 
}

# Function to run equilibrium
equilibrium() {
    while true; do
        echo
        echo -e "${YELLOW}--------------------------"
        echo -e "      Equilibrium Menu"
        echo -e "--------------------------${NC}"
        echo -e "${LIGHT_PURPLE}[${NC}01${LIGHT_PURPLE}]${NC} NVT Equilibration"
        echo -e "${LIGHT_PURPLE}[${NC}02${LIGHT_PURPLE}]${NC} NPT Equilibration"
        echo -e "${LIGHT_PURPLE}[${NC}03${LIGHT_PURPLE}]${NC} Both NVT & NPT"
        echo -e "${LIGHT_PURPLE}[${NC}04${LIGHT_PURPLE}]${NC} Back to Main Menu"
        echo -e ${YELLOW}"--------------------------${NC}"
        echo -e ${LIGHT_YELLOW}
        read -p "Enter your choice [1-4]: " equil_choice
        echo -e ${NC}
        case $equil_choice in
            1)
                if [ ! -f "em.gro" ]; then
                    echo -e ${LIGHT_RED} "em.gro does not exist."${NC}
                    sleep 2.0
                    exit 1
                fi
                
                if [ ! -f "nvt.mdp" ]; then
                    echo "nvt.mdp does not exist. Downloading..."
                    wget -nc "http://www.mdtutorials.com/gmx/lysozyme/Files/nvt.mdp"
                fi
                
                check_file_exists "nvt.gro" || return

                NVT_equilibration 2>/dev/null & show_spinner $! "Running NVT Equilibration" ;;
            2)
                if [ ! -f "nvt.gro" ]; then
                    echo -e ${LIGHT_RED} "nvt.gro does not exist."${NC}
                    exit 1
                fi
                
                if [ ! -f "npt.mdp" ]; then
                    echo "npt.mdp does not exist. Downloading..."
                    wget -nc "http://www.mdtutorials.com/gmx/lysozyme/Files/npt.mdp"
                fi

                check_file_exists "npt.gro" || return
                
                NPT_equilibration 2>/dev/null & show_spinner $! "Running NPT Equilibration" ;;
            3) 
                if [ ! -f "em.gro" ]; then
                    echo -e ${LIGHT_RED} "em.gro does not exist."${NC}
                    sleep 2.0
                    exit 1
                fi
                
                if [ ! -f "nvt.mdp" ]; then
                    echo "nvt.mdp does not exist. Downloading..."
                    wget -nc "http://www.mdtutorials.com/gmx/lysozyme/Files/nvt.mdp"
                fi
                if [ ! -f "npt.mdp" ]; then
                    echo "npt.mdp does not exist. Downloading..."
                    wget -nc "http://www.mdtutorials.com/gmx/lysozyme/Files/npt.mdp"
                fi

                # Run NVT and NPT in the background, suppress both stdout and stderr
                # Run NVT and NPT in the background, suppressing output, but show loader
                NVT_equilibration > /dev/null 2>&1 & 
                show_spinner $! "Running NVT Equilibration"
                echo -e ${LIGHT_GREEN}"DONE!${NC}"
                NPT_equilibration > /dev/null 2>&1 & 
                show_spinner $! "Running NPT Equilibration"
                echo -e ${LIGHT_GREEN}"DONE!${NC}"
                sleep 1.0
                # Wait for both NVT and NPT processes to finish
                wait
                ;;
            4)
                echo
                echo "Returning to main menu..."
                return
                ;;
            *)
                echo -e "${LIGHT_RED}Invalid option! Please select between 1 and 3.${NC}"
                sleep 1.0
                ;;
        esac
    done
}

# Update nsteps in md.mdp and regenerate md.tpr
update_simulation_steps() {
    # Update nsteps in md.mdp
    sed -i "s/^nsteps.*/nsteps = $md_nsteps/" md.mdp
    # echo "Updated nsteps in md.mdp:"
    # grep "nsteps" md.mdp  # Verify the update in md.mdp

    # Clear old .tpr file (optional but recommended)
    rm -f md.tpr

    # Regenerate md.tpr using the updated md.mdp
    gmx grompp -f md.mdp -c npt.gro -t npt.cpt -p topol.top -o md.tpr > /dev/null 2>&1 || {
        echo -e ${LIGHT_RED} "Error: Failed to prepare production MD.${NC}"
        exit 1
    }

    # Confirm the update in the new md.tpr file
    # echo "Confirming nsteps in md.tpr:"
    # gmx dump -s md.tpr | grep nsteps
}

# prepare_md_production() {
#     gmx grompp -f md.mdp -c npt.gro -t npt.cpt -p topol.top -o md.tpr || { 
#         echo -e ${LIGHT_RED} "Error: Failed to prepare production MD.${NC}"
#         sleep 2.0
#         exit 1
#     }
# }

# Function to run production MD
production_md() {
    echo   
    # Check for required files
    if [ ! -f "npt.gro" ]; then
        echo -e ${LIGHT_RED} "npt.gro does not exist.${NC}"
        sleep 2.0
        exit 1
    fi

    if [ ! -f "md.mdp" ]; then
        echo "md.mdp does not exist. Downloading..."
        wget -nc "http://www.mdtutorials.com/gmx/lysozyme/Files/md.mdp"
    fi
    
    check_file_exists "md.xtc" || return
    echo
    
    #User input simulation time
    echo -e ${YELLOW}"Do you want to continue with default simulation time (10ns)?"
    echo -e "${LIGHT_PURPLE}[${NC}01${LIGHT_PURPLE}]${NC} Yes, continue"
    echo -e "${LIGHT_PURPLE}[${NC}02${LIGHT_PURPLE}]${NC} No, enter custom value"
    echo
    read -p "Enter your choice [1-2]: " simulation_time
        echo -e ${NC}
        case $simulation_time in
            1) md_nsteps=5000000 ;;
            2) read -p "Set simulation time (ns): " md_time_ns
            md_time_ps=$(echo "$md_time_ns * 1000" | bc)
            md_nsteps=$(echo "$md_time_ps / 0.002" | bc)
            ;;
            *) echo -e "${LIGHT_RED}Invalid option! Please select between 1 and 3.${NC}" ;
            sleep 2.0 ;
            return ;;
        esac

    # Update nsteps and generate new md.tpr file
    update_simulation_steps

    # Prepare for production MD
    # prepare_md_production > /dev/null 2>&1 & show_spinner $! "Processing Preparation"
    
    echo -e ${LIGHT_GREEN}"Preparation DONE!${NC}"
    
    # Check for any GPU using lspci
    gpu_info=$(lspci | grep -i vga)

    if [[ -n "$gpu_info" ]]; then
        echo "GPU detected:"
        echo "$gpu_info"
        
        # Check if the GPU is an NVIDIA card and if nvidia-smi is available
        if command -v nvidia-smi &> /dev/null; then
            echo -e ${LIGHT_CYAN} "NVIDIA GPU detected. Running nvidia-smi for details:${NC}"
            nvidia-smi
            sleep 3.0
            
            # Measure and show time while running the simulation, suppress output
            start_time=$(date +%s)  # Get start time
            gmx mdrun -deffnm md -v -nb gpu > /dev/null 2>&1 & show_spinner $! "Running MD Simulation"
            end_time=$(date +%s)  # Get end time
            
            elapsed=$((end_time - start_time))  # Calculate elapsed time in seconds
            echo "Elapsed time: $elapsed seconds"
            show_spinner $! "Running MD Simulation on GPU"
            
        else
            echo -e ${LIGHT_CYAN} "NVIDIA GPU not detected or nvidia-smi command not found. Running simulation on CPU...${NC}"
            sleep 3.0
            
            # Measure and show time while running the simulation, suppress output
            start_time=$(date +%s)  # Get start time
            gmx mdrun -deffnm md -v > /dev/null 2>&1 & show_spinner $! "Running MD Simulation"
            end_time=$(date +%s)  # Get end time
            
            elapsed=$((end_time - start_time))  # Calculate elapsed time in seconds
            echo "Elapsed time: $elapsed seconds"
            show_spinner $! "Running MD Simulation on CPU"
        fi
    else
        echo -e ${LIGHT_CYAN}"No GPU detected. Running simulation on CPU..."${NC}
        sleep 3.0
        
        # Measure and show time while running the simulation, suppress output
        start_time=$(date +%s)  # Get start time
        gmx mdrun -deffnm md -v > /dev/null 2>&1 & show_spinner $! "Running MD Simulation"
        end_time=$(date +%s)  # Get end time
        
        elapsed=$((end_time - start_time))  # Calculate elapsed time in seconds
        echo "Elapsed time: $elapsed seconds"
        sleep 2.0
    fi

    # Wait for background processes to finish
    wait
}

# Function to run analysis
run_analysis() {
    echo
    echo "Running analysis..."
    while true; do
        echo "---------------------------"
        echo "       Analysis Menu"
        echo "---------------------------"
        echo "1) Recentering and Rewrapping Coordinates"
        echo "2) Find RMSD"
        echo "3) Back to Main Menu"
        read -p "Enter your choice [1-3]: " analysis_choice

        case $analysis_choice in
            1)
                echo
                echo "Recentering and Rewrapping Coordinates..."
                echo
                if [ ! -f "md.xtc" ]; then
                    echo -e ${LIGHT_RED} "md.xtc does not exist.${NC}" 
                    exit 1
                fi
                check_file_exists "md_noPBC.xtc" || return
                gmx trjconv -s md.tpr -f md.xtc -o md_noPBC.xtc -pbc mol -center || exit 1
                ;;
            2)
                echo
                echo "Finding RMSD..."
                echo
                if [ ! -f "md_noPBC.xtc" ]; then
                    echo -e ${LIGHT_RED} "md_noPBC.xtc does not exist.${NC}" 
                    exit 1
                fi
                check_file_exists "rmsd.xvg" || return
                gmx rms -s md.tpr -f md_noPBC.xtc -o rmsd.xvg -tu ns || exit 1
                ;;
            3)
                echo
                echo "Returning to Main Menu..."
                return
                ;;
            *)
                echo "${LIGHT_RED}Invalid option! Please select between 1 and 3.${NC}"
                sleep 1.0
                ;;
        esac
    done
}

# manual_run(){
# while true; do
#     echo "---------------------------"
#     echo "       Select your run"
#     echo "---------------------------"
#     echo "1) Default (1ns)"
#     echo "2) Advanced"
#     echo "3) Exit"
#     echo "---------------------------"
#     read -p "Enter your choice [1-3]: " run_choice

#     case $run_choice in
#         1) 
#             manual_steps ;;
#         2)
#             echo
#             echo "Set your own values"
#             echo
#             read -p "Set NVT steps (default: 50000): " nvt_steps
#             read -p "Set NPT steps (default: 50000): " npt_steps
#             read -p "Set simulation time (default: 1ns): " md_time_ns
#             md_time_ps=$(echo "$md_time_ns * 1000" | bc)
#             md_nsteps=$(echo "$md_time_ps / 0.002" | bc)
#             echo
#             read -p "Are you confirm? Do you want to contine? (y/n): " adv_confirm
#             if [ $adv_confirm == "y" ]; then
#                 sed -i "s/^nsteps.*/nsteps = $npt_steps/" npt.mdp
#                 sed -i "s/^nsteps.*/nsteps = $nvt_steps/" nvt.mdp
#                 sed -i "s/^nsteps.*/nsteps = $md_nsteps/" md.mdp
#                 manual_steps
#             else
#                 exit 1
#             fi
#             ;;
#         3)
#             echo
#             echo "Exiting..."
#             exit 1
#             ;;
#         *)  echo -e "${LIGHT_RED}Invalid option! Please select between 1 and 8.${NC}" 
#             sleep 1.0 
#             exit 0 ;;
#     esac
# done
# }

automatic_run(){
    generate_protein_topology
    define_box_and_solvate
    add_ions
    energy_minimization
    equilibrium
    production_md
    run_analysis
    exit 0
}

test_run(){
    sed -i "s/^nsteps.*/nsteps = 500/" npt.mdp
    sed -i "s/^nsteps.*/nsteps = 500/" nvt.mdp
    sed -i "s/^nsteps.*/nsteps = 5000/" md.mdp
    automatic_run
}

advanced_options(){
    echo -e "${YELLOW}Set custom values"
    echo
    read -p "Set NVT steps (default: 50000): " nvt_steps
    read -p "Set NPT steps (default: 50000): " npt_steps
    read -p "Set simulation time (default: 1ns): " md_time_ns
    md_time_ps=$(echo "$md_time_ns * 1000" | bc)
    md_nsteps=$(echo "$md_time_ps / 0.002" | bc)
    echo -e ${NC}
    read -p "Are you confirm? Do you want to contine? (y/n): " adv_confirm
    if [ $adv_confirm == "y" ]; then
        sed -i "s/^nsteps.*/nsteps = $npt_steps/" npt.mdp
        sed -i "s/^nsteps.*/nsteps = $nvt_steps/" nvt.mdp
        sed -i "s/^nsteps.*/nsteps = $md_nsteps/" md.mdp
        echo -e "${LIGHT_GREEN}Changes saved successfully...${NC}"
        echo
        sleep 2.0
        main_menu
    else
        exit 1
    fi
}

# main_menu() {
# while true; do
#     echo -e "${YELLOW}---------------------------"
#     echo -e "       Select run type"
#     echo -e "---------------------------${NC}"
#     echo "[1] Full run"
#     echo "[2] Step wise"
#     echo "[3] Exit"
#     echo "---------------------------"
#     echo -e ${LIGHT_YELLOW}

#     choice=$(prompt_user "Enter your choice [1-3]: ")
#     echo -e ${NC}

#     case $choice in
#         1) automatic_run ;;
#         2) manual_run ;;
#         3) echo -e "${LIGHT_GREEN}Thanks for using GROMACS!${NC}"
#            echo "Exiting..."
#            echo; exit 0 ;;
#         *) echo -e "${LIGHT_RED}Invalid option! Please select between 1 and 8.${NC}" 
#         sleep 1.0 ;;
#     esac
# done
# }

manual_run(){
clear
while true; do
    echo
    echo -e "${YELLOW}------------------------------------"
    echo -e "             Main Menu"
    echo -e "------------------------------------${NC}"
    echo -e "${LIGHT_PURPLE}[${NC}01${LIGHT_PURPLE}]${NC} Download Protein Structure"
    echo -e "${LIGHT_PURPLE}[${NC}02${LIGHT_PURPLE}]${NC} Generate Protein Topology"
    echo -e "${LIGHT_PURPLE}[${NC}03${LIGHT_PURPLE}]${NC} Define box and solvate the system"
    echo -e "${LIGHT_PURPLE}[${NC}04${LIGHT_PURPLE}]${NC} Add ions"
    echo -e "${LIGHT_PURPLE}[${NC}05${LIGHT_PURPLE}]${NC} Energy minimization"
    echo -e "${LIGHT_PURPLE}[${NC}06${LIGHT_PURPLE}]${NC} Equilibrium"
    echo -e "${LIGHT_PURPLE}[${NC}07${LIGHT_PURPLE}]${NC} Production MD"
    echo -e "${LIGHT_PURPLE}[${NC}08${LIGHT_PURPLE}]${NC} Analysis"
    echo -e "${LIGHT_PURPLE}[${NC}09${LIGHT_PURPLE}]${NC} Main menu"
    echo -e "${LIGHT_PURPLE}[${NC}10${LIGHT_PURPLE}]${NC} ${LIGHT_RED}Exit${NC}"
    echo -e "${YELLOW}------------------------------------${NC}"
    echo -e ${LIGHT_YELLOW}

    choice=$(prompt_user "Enter your choice [1-10]: ")
    echo -e ${NC}

    case $choice in
        1) download_protein ;;
        2) generate_protein_topology ;;
        3) define_box_and_solvate ;;
        4) add_ions ;;
        5) energy_minimization ;;
        6) equilibrium ;;
        7) production_md ;;
        8) run_analysis ;;
        9) banner
        main_menu ;;
        10) echo -e "${LIGHT_YELLOW}Thanks for using GRAVITy!${NC}"
        echo "Exiting..."
        echo
        exit 0 ;;
        *) echo -e "${LIGHT_RED}Invalid option! Please select between 1 and 11.${NC}" 
        sleep 1.0 ;;
    esac
done
}

banner(){
# Main script loop
clear
echo
# Print the colored ASCII art
echo -e "${LIGHT_RED}  __________________    _________   ____.______________      ${RESET}"
echo -e "${LIGHT_RED} /  _____/\\______   \\  /  _  \\   \\ /   /|   \\__    ___/${RESET}__.__. "
echo -e "${LIGHT_RED}/   \\  ___ |       _/ /  /_\\  \\   Y   / |   | |    | ${RESET}<   |  | "
echo -e "${LIGHT_RED}\\    \\_\\  \\|    |   \\/    |    \\     /  |   | |    |  ${RESET}\\___  | "
echo -e "${LIGHT_RED} \\______  /|____|_  /\\____|__  /\\___/   |___| |____|  ${RESET}/ ____| "
echo -e "${LIGHT_RED}        \\/        \\/         \\/                       ${RESET}\\/      "
echo
echo -e "${WHITE}  [${LIGHT_RED}G${NC}ROMACS ${LIGHT_RED}R${NC}apid ${LIGHT_RED}A${NC}nalysis & ${LIGHT_RED}V${NC}isualization ${LIGHT_RED}I${NC}nterface ${LIGHT_RED}T${NC}ool -y]${NC}"
echo
}

main_menu(){
    while true; do
        echo -e "${YELLOW}--------------------------"
        echo -e "        Select Run"
        echo -e "--------------------------${NC}"
        echo -e "${LIGHT_PURPLE}[${NC}1${LIGHT_PURPLE}]${NC} ${WHITE}Manual run${NC}"
        echo -e "${LIGHT_PURPLE}[${NC}2${LIGHT_PURPLE}]${NC} ${WHITE}Automatic run${NC}"
        echo -e "${LIGHT_PURPLE}[${NC}3${LIGHT_PURPLE}]${NC} ${WHITE}Test run (10ps)${NC}"
        echo -e "${LIGHT_PURPLE}[${NC}4${LIGHT_PURPLE}]${NC} ${WHITE}Advanced Options${NC}"
        echo -e "${LIGHT_PURPLE}[${NC}5${LIGHT_PURPLE}]${NC} ${LIGHT_RED}Exit${NC}"
        echo -e "${YELLOW}--------------------------${NC}"
        echo -e ${LIGHT_YELLOW}

        choice=$(prompt_user "Enter your choice [1-5]: ")
        echo -e ${NC}
        
        case $choice in
            1) manual_run ;;
            2) automatic_run ;;
            3) test_run ;;
            4) advanced_options ;;
            5) echo -e "${YELLOW}Thanks for using GRAVITy!${NC}"
            echo "Exiting..."
            echo
            exit 0 ;;
            *) echo -e "${LIGHT_RED}Invalid option! Please select between 1 and 5.${NC}" 
            sleep 1.0 ;;
        esac
    done
}
#echo -e "${LIGHT_WH}Please keep protein file ready in the working "
#echo -e "directory and rename it as 'protein.pdb'${NC}"
echo 

#HOME SCREEN
banner
check_internet
echo
check_dependencies
echo -e "${LIGHT_CYAN}Simulation type: Protein in water${NC}"
echo
main_menu